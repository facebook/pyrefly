<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://pyrefly.org/blog/</id>
    <title>Pyrefly Blog</title>
    <updated>2025-09-29T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://pyrefly.org/blog/"/>
    <subtitle>Pyrefly Blog</subtitle>
    <entry>
        <title type="html"><![CDATA[Bringing NumPy's type-completeness score to nearly 90%]]></title>
        <id>https://pyrefly.org/blog/numpy-type-completeness/</id>
        <link href="https://pyrefly.org/blog/numpy-type-completeness/"/>
        <updated>2025-09-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We tell the story of how we brought NumPy's type-completeness score from ~33% to nearly 90%]]></summary>
        <content type="html"><![CDATA[<p>Because <a href="https://numpy.org/" target="_blank" rel="noopener noreferrer">NumPy</a> is one of the most downloaded packages in the Python ecosystem, any incremental improvement can have a large impact on the data science ecosystem. In particular, improvements related to static typing can improve developer experience and help downstream libraries write safer code. We'll tell the story about how we (Quansight Labs, with support from Meta's Pyrefly team) helped bring its type-completeness score to nearly 90% from an initial 33%.</p>
<p><strong>TL;DR</strong>:</p>
<ul>
<li>NumPy's type-completeness score was ~33%.</li>
<li>A one-line fix doubled coverage to over 80%.</li>
<li>Fully typing MaskedArray pushed the score to nearly 90%.</li>
<li>What's left? Top-level <code>numpy.ma</code> functions, more precise overloads, and adding a type-checker to NumPy's CI.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wait-whats-type-completeness">Wait, what's type completeness?<a href="https://pyrefly.org/blog/numpy-type-completeness/#wait-whats-type-completeness" class="hash-link" aria-label="Direct link to Wait, what's type completeness?" title="Direct link to Wait, what's type completeness?">​</a></h2>
<p>Modern IDEs use type annotations to help developers by showing them helpful suggestions and highlighting syntax. <a href="https://github.com/microsoft/pyright" target="_blank" rel="noopener noreferrer">Pyright</a> is a popular type-checker which, as well as checking for correctness and consistency, can also measure what percentage of a library's public API has type annotations. We call the percentage of fully-typed symbols exported by a library the <em>type-completeness score</em>.</p>
<p>For example, a module which exports functions <code>foo</code> and <code>bar</code>:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">foo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>would have a 50% type-completeness score, because:</p>
<ul>
<li><code>foo</code> is partially unknown, as it's missing a return annotation.</li>
<li><code>bar</code> is type-complete.</li>
</ul>
<p>By changing the <code>foo</code> signature to be <code>def foo(a: int) -&gt; None:</code>, the type-completeness score would jump to 100%. The more type-complete a library is, the more helpful the suggestions an IDE can show to the user.</p>
<p>Note that type-completeness only measures how much of the public API (at least, the part known to Pyright) is covered by types. If you want to verify that those types are correct and self-consistent, you'll also need to run a type checker. The most used type checkers currently are <a href="https://github.com/python/mypy" target="_blank" rel="noopener noreferrer">mypy</a> and Pyright, but <a href="https://github.com/facebook/pyrefly" target="_blank" rel="noopener noreferrer">Pyrefly</a> and <a href="https://github.com/astral-sh/ty" target="_blank" rel="noopener noreferrer">ty</a> are also attracting a lot of attention due to their impressive performance characteristics (note however that neither yet describes itself as production-ready, so temper your expectations accordingly if you try them out!).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-type-complete-is-numpy">How type-complete is NumPy?<a href="https://pyrefly.org/blog/numpy-type-completeness/#how-type-complete-is-numpy" class="hash-link" aria-label="Direct link to How type-complete is NumPy?" title="Direct link to How type-complete is NumPy?">​</a></h2>
<p>When we started this effort (in March 2025), we first tried measuring NumPy's type-completeness by running:</p>
<div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">pyright --verifytypes numpy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The output showed a completeness score of...18%. Wait, only 18%? This seemed very low, because by then typing efforts in NumPy had been ongoing for some time. Was something up with the metric? Upon closer inspection of the output, we noticed a few things:</p>
<ul>
<li>Some objects, such as <code>DTypeLike</code>, were reported to be "partially unknown", even though they had type annotations.</li>
<li>The type-completeness report included test modules such as <code>numpy.tests.test_matlib</code>.</li>
</ul>
<p>The first issue was caused by an import from the standard library <code>decimal</code> module, which itself is partially untyped. Given that this is outside of NumPy's direct control, we decided to exclude it from the coverage report by using <code>--ignoreexternal</code>, <a href="https://github.com/microsoft/pyright/discussions/9911" target="_blank" rel="noopener noreferrer">as suggested by Eric Traut</a>.</p>
<p>For the second issue, Pyright gives us an option to export the coverage report to json (<code>--outputjson</code>). We could then parse the json and exclude <code>numpy.tests</code>. Given that NumPy users wouldn't ordinarily interact with NumPy's internal test suite but that Pyright considers it public, we decided that it made sense for us to exclude tests in order to focus our efforts on what would make the biggest user-facing impact.</p>
<p>Once we'd addressed the two steps above, the baseline type-completeness score became 33%. This was our starting point. We could then focus our efforts on the remaining 67%!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-one-line-change-which-doubled-type-completeness">The one-line change which doubled type-completeness<a href="https://pyrefly.org/blog/numpy-type-completeness/#the-one-line-change-which-doubled-type-completeness" class="hash-link" aria-label="Direct link to The one-line change which doubled type-completeness" title="Direct link to The one-line change which doubled type-completeness">​</a></h2>
<p>Pyright's report includes classes, methods, functions, type aliases, and more. A lot of scientific Python code centres around some central classes such as <code>numpy.ndarray</code>. <code>ndarray</code> was reported as "partially unknown", but eye-balling the exported symbols related to that class revealed something interesting:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">mean</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'isTypeKnown'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> x </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> exported </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'name'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">startswith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'numpy.ndarray.'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">np</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">float64</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0.9811320754716981</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So, <code>ndarray</code> was reported as "partially unknown", but 98% of its methods had known types. It shouldn't be much effort to bring that number to 100%! In fact, all it took was a <a href="https://github.com/numpy/numpy/pull/28908" target="_blank" rel="noopener noreferrer">one-line change to fix a typo in a type annotation</a>:</p>
<div class="language-diff codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-diff codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">- def setfield(self, /, val: ArrayLike, dtype: DTypeLike, offset: CanIndex = 0) -&gt; None: ...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">+ def setfield(self, /, val: ArrayLike, dtype: DTypeLike, offset: SupportsIndex = 0) -&gt; None: ...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That's it! <code>CanIndex</code> was an unknown symbol and was probably mistyped, and replacing it with the correct <code>SupportsIndex</code> one brought NumPy's overall type-completeness to over 80%! We then started examining other NumPy classes to see if there was anywhere else where we could make an impact, and hopefully a much larger one.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="enter-maskedarray">Enter MaskedArray<a href="https://pyrefly.org/blog/numpy-type-completeness/#enter-maskedarray" class="hash-link" aria-label="Direct link to Enter MaskedArray" title="Direct link to Enter MaskedArray">​</a></h2>
<p>When we looked at the percentage of typed symbols from the MaskedArray class, we noticed something interesting:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">mean</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'isTypeKnown'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> x </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> exported </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'name'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">startswith</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'numpy.ma.core.MaskedArray.'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">np</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">float64</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0.2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Only 20% of them were typed! That's quite a contrast with <code>ndarray</code>, which was already at 98% when we started. It's also a fairly widely used class, appearing in the codebases of pandas, scikit-learn, and xarray. Given how poorly typed it was, we decided it would be a good candidate to spend time on!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="typing-maskedarray">Typing MaskedArray<a href="https://pyrefly.org/blog/numpy-type-completeness/#typing-maskedarray" class="hash-link" aria-label="Direct link to Typing MaskedArray" title="Direct link to Typing MaskedArray">​</a></h2>
<p>The main difficulty in typing NumPy code isn't inferring the possible argument values (which is quite easy to do with automated tools), but rather dealing with the large number of overloads. This is because many of NumPy methods' return types depend on the exact combinations of the input types. For example, suppose we have a <code>MaskedArray</code> <code>ma</code> and want to count the number of non-null values:</p>
<ul>
<li><code>ma.count()</code> returns an integer.</li>
<li><code>ma.count(axis=0)</code> returns an array.</li>
<li><code>ma.count(keepdims=True)</code> also returns an array, of the same shape as the input array.</li>
</ul>
<p>We can type this by having a different overload of each of these different cases. This is a relatively simple example, but there are others where the number of necessary overloads was as high as 9! This isn't something which is easy to automate, and requires careful reading of the documentation and of the source code. It's a non-trivial amount of work.</p>
<p>But...we pulled through it, and thanks to some very timely and constructive reviews from the amazing <a href="https://github.com/jorenham" target="_blank" rel="noopener noreferrer">Joren Hammudoglu</a>, MaskedArray is now reported as 100% type-complete! As for the overall type-completeness, that's now at 88%. So...what's left?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-missing-from-numpy">What's missing from NumPy?<a href="https://pyrefly.org/blog/numpy-type-completeness/#whats-missing-from-numpy" class="hash-link" aria-label="Direct link to What's missing from NumPy?" title="Direct link to What's missing from NumPy?">​</a></h2>
<p>In the MaskedArray module, there's still some untyped top-level functions, such as <code>numpy.ma.count</code>. Overloads could be made more precise and shape-preserving (e.g. if the input is 2D, then make sure to preserve this fact in the output where possible). There's some missing defaults in the stubs. There's no shortage of work here.</p>
<p>The biggest missing bit, however, is the elephant in the room: NumPy doesn't run a type-checker over its codebase in CI. It has some typing tests, sure, but that's different from running a type-checker. If any motivated reader is interested in making a significant open source contribution, then getting NumPy's typing into a state such that a type checker (and possibly even <a href="https://mypy.readthedocs.io/en/stable/stubtest.html" target="_blank" rel="noopener noreferrer">stubtest</a>) can be run over it could be a great use of your time.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-acknowledgements">Conclusion, acknowledgements<a href="https://pyrefly.org/blog/numpy-type-completeness/#conclusion-acknowledgements" class="hash-link" aria-label="Direct link to Conclusion, acknowledgements" title="Direct link to Conclusion, acknowledgements">​</a></h2>
<p>We've looked at how we contributed towards increasing NumPy's type-completeness. Given how widespread NumPy's adoption is, we expect this effort to have been an impactful one. We look forward to seeing what else we can achieve in this space - thank you to <a href="https://discuss.python.org/t/call-for-suggestions-nominate-python-packages-for-typing-improvements/80186/1" target="_blank" rel="noopener noreferrer">Meta and Quansight Labs</a> for having funded and facilitated this effort!</p>]]></content>
        <author>
            <name>Marco Gorelli, Quansight Labs</name>
            <uri>https://github.com/MarcoGorelli</uri>
        </author>
        <category label="typechecking" term="typechecking"/>
        <category label="news" term="news"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Give your Python IDE a Glow-Up with Pyrefly]]></title>
        <id>https://pyrefly.org/blog/2025/09/15/ide-extension/</id>
        <link href="https://pyrefly.org/blog/2025/09/15/ide-extension/"/>
        <updated>2025-09-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how Pyrefly's language server capabilities can help you navigate large Python codebases with ease.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://pyrefly.org/assets/images/ide-blog-hero-22aa9f0c1c4873f0e6c18e02faf40823.png" width="5058" height="2680" class="img_ev3q"></p>
<p>The challenges of managing ever-growing codebases are hardly new. As far back as 1995, Niklaus Wirth, (creator of programming language Pascal) already emphasized the importance of keeping software lean in his essay <a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fpeople.inf.ethz.ch%2Fwirth%2FArticles%2FLeanSoftware.pdf&amp;h=AT2RMg0sKqoJzLiFe4OIBZRxVLklBs9SeIlBrZnHnaEVP2VVCAG8Z9vuiFo4kP_MoegKDrRBKhxV_0cuWBijok2KhvKG9nLhUm5USFJC2Nzlq8yhSOvWirfU_BnPIve4Ofo7c-emKgWgbBEI3w" target="_blank" rel="noopener noreferrer">A Plea for Lean Software</a>. Fast forward to today: many programmers still face the reality that, despite their best coding intentions, as projects grow in size and complexity, so do their codebases. Even when a project scales to millions of lines of code, developers still expect their IDE to be fast, accurate, and efficient. And with increasingly large and interconnected (dare I say, spaghetti?) code, you probably rely on your IDE even more to help you navigate the chaos (ahem I mean complexity).</p>
<p>But what you may not have thought about before is that scaling project size presents a real challenge for your IDE: how do you keep code navigation tools responsive and reliable when the codebase keeps expanding? In this blog, we’ll explore this challenge and introduce you to Pyrefly - a scalable language server and typechecker designed to keep your Python development experience smooth and snappy at scale.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="background---what-is-a-language-server-and-why-does-it-matter"><strong>Background - What is a Language Server and Why Does It Matter?</strong><a href="https://pyrefly.org/blog/2025/09/15/ide-extension/#background---what-is-a-language-server-and-why-does-it-matter" class="hash-link" aria-label="Direct link to background---what-is-a-language-server-and-why-does-it-matter" title="Direct link to background---what-is-a-language-server-and-why-does-it-matter">​</a></h2>
<p>The Language Server Protocol (LSP) is a standardized way for code editors to communicate with language-specific servers that provide features like autocomplete, go-to-definition, and symbol renaming. Instead of each editor implementing these features separately, LSP allows a single language server to support multiple editors. Pyrefly’s language server capabilities are based on the <a href="https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/" target="_blank" rel="noopener noreferrer">Language Server Protocol Specification</a> and are designed to still be blazing fast even on code bases with over 20 million lines of code.</p>
<p>A key capability of many language servers, including Pyrefly, is typechecking, which enhances IDE features by providing type diagnostics. Pyrefly’s language server not only reports type errors like basic type checkers, such as <a href="https://github.com/python/mypy" target="_blank" rel="noopener noreferrer">Mypy</a>, but also replaces core IDE functionalities including “find definition,” hover (displaying types and docstrings), and completions. By consolidating these features, Pyrefly ensures that the types it checks and the types displayed in your IDE will always match.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="instagram---a-case-study-on-the-pain-of-slow-code-navigation"><strong>Instagram - A Case Study on the Pain of Slow Code Navigation</strong><a href="https://pyrefly.org/blog/2025/09/15/ide-extension/#instagram---a-case-study-on-the-pain-of-slow-code-navigation" class="hash-link" aria-label="Direct link to instagram---a-case-study-on-the-pain-of-slow-code-navigation" title="Direct link to instagram---a-case-study-on-the-pain-of-slow-code-navigation">​</a></h2>
<p>Meta operates an incredibly large Python codebase - a massive monorepo containing <strong>almost 1.5 million Python files</strong> maintained by thousands of developers. Instagram is one of those projects, with <strong>over</strong> <strong>20 million lines</strong> of Python code. At this scale, even simple navigation tasks like jumping to a function definition, searching for references, or loading syntax highlights could take almost a minute in the worst cases. That may not sound like a lot on its own, but experiencing it every few minutes quickly becomes frustrating and has a tangible impact on developer productivity, especially when multiplied across a large company like Meta.</p>
<p>Pyrefly emerged in part to address this exact challenge (you can read more about our origin story in our <a href="https://pyrefly.org/blog/introducing-pyrefly/" target="_blank" rel="noopener noreferrer">intro blog</a>). In real world use cases, developers who switched from Pyright (the default LSP for VSCode) to Pyrefly spent <strong>98%</strong> less time waiting on hover results and go-to definition was <strong>~10x</strong> faster. On the slowest files (p99), these IDE responses grew from an order of minutes to seconds (<strong>30x</strong> improvement). If those numbers are hard to visualise, the TL;DR is that this upgrade took instagram developers from questioning “is my editor frozen?” to not giving their IDE a second thought.</p>
<div style="display:flex;flex-direction:row;max-width:100%"><video src="/videos/pyrefly-ide-comparison.mov" style="max-width:50%" muted="" loop="" autoplay="" playsinline="" preload="metadata"></video><video src="/videos/pyright-ide-comparison.mov" style="max-width:50%" muted="" loop="" autoplay="" playsinline="" preload="metadata"></video></div>
<p style="text-align:center"><em>Pyrefly (left) vs Pyright (right) autocomplete speed comparison</em></p>
<p>These early results are certainly promising indications of a smoother developer experience for Meta engineers, and we're excited to share more insights as developers continue using Pyrefly. But Pyrefly isn’t just for Meta developers, it’s open source and ready for everyone to explore! If you’re curious about Pyrefly’s language server features and want to see how to get it up and running in your IDE, keep reading!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pyrefly-lsp-at-a-glance"><strong>Pyrefly LSP at a Glance</strong><a href="https://pyrefly.org/blog/2025/09/15/ide-extension/#pyrefly-lsp-at-a-glance" class="hash-link" aria-label="Direct link to pyrefly-lsp-at-a-glance" title="Direct link to pyrefly-lsp-at-a-glance">​</a></h2>
<p>While Pyrefly is still in Alpha as of the time of posting, it already supports most of the essential IDE capabilities that Python developers rely on daily, such as:</p>
<ul>
<li><strong>Autocomplete:</strong> predicts what you’re likely to type next, reducing the need to remember exact names of variables, functions, and others, even importing them automatically for you</li>
<li><strong>Go to Definition</strong>: allows you to jump directly to the source of a function, class, or variable with a single click.</li>
<li><strong>Hover:</strong> when you hover over a symbol, Pyrefly displays useful information such as type annotations, documentation, and inferred types.</li>
<li><strong>Rename symbols</strong>: right click to rename variables, functions, or classes across the entire codebase.</li>
<li><strong>Typechecking</strong>: Pyrefly will also show type errors and infer types, which you can toggle on or off in your Pyrefly settings (more info in the next section)</li>
<li><strong>And many more</strong>! explore the full list and details in the <a href="https://pyrefly.org/en/docs/IDE/" target="_blank" rel="noopener noreferrer">Pyrefly IDE docs</a>.</li>
</ul>
<p>The Pyrefly team and our open-source community are continuously working on improvements and new features so stay tuned for updates! We also want to hear from you - what features do you need to make your IDE experience better? <a href="https://github.com/facebook/pyrefly/issues" target="_blank" rel="noopener noreferrer">Open a GitHub issue</a> or <a href="https://discord.gg/Cf7mFQtW7W" target="_blank" rel="noopener noreferrer">join our discord</a> to share your thoughts.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-add-pyrefly-to-your-ide"><strong>How to add Pyrefly to your IDE</strong><a href="https://pyrefly.org/blog/2025/09/15/ide-extension/#how-to-add-pyrefly-to-your-ide" class="hash-link" aria-label="Direct link to how-to-add-pyrefly-to-your-ide" title="Direct link to how-to-add-pyrefly-to-your-ide">​</a></h2>
<p>Pyrefly can be used in a range of IDEs, including standard GUI editors like <strong>VSCode</strong> or <strong>Pycharm</strong>, terminal editors like <strong>Neovim</strong> or <strong>Emacs</strong>, and AI editors like <strong>Cursor</strong> or <strong>Windsurf</strong>. You can check out the full list of supported IDEs in the <a href="https://pyrefly.org/en/docs/IDE/" target="_blank" rel="noopener noreferrer">Pyrefly IDE docs</a>.</p>
<p>For GUI editors, setup is pretty straightforward and generally follows the same steps:</p>
<ol>
<li>Search for “pyrefly” in the appropriate extension marketplace for your IDE and install it</li>
<li>Open any Python file and the extension will activate automatically</li>
<li><strong>Note</strong>: if using an editor other than VSCode you may need to uninstall the default Python LSP in your editor. You can do this by opening your extension settings and setting <code>"Language Server: None"</code></li>
<li><strong>Optional</strong>: we recommend all developers use a typechecker as part of their regular software development process, however we know that type errors in your IDE can be noisy, so the type errors feature is not turned on by default if you don't have a <code>pyrefly.toml</code> (from <code>pyrefly init</code>). If you DO want type errors to show up in your editor everywhere (as red squiggles), you should update your extension settings to include <code>"python.pyrefly.displayTypeErrors": "force-on"</code></li>
</ol>
<p><img decoding="async" loading="lazy" src="https://pyrefly.org/assets/images/ide-settings-1ad2d1d2b8aa91be0826783fcdac8ecb.png" width="1975" height="403" class="img_ev3q"></p>
<p>For terminal editors the setup process can vary depending on which editor you use so check out the <a href="https://pyrefly.org/en/docs/IDE/#other-editors" target="_blank" rel="noopener noreferrer">installation documentation</a> for specific instructions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion"><strong>Conclusion</strong><a href="https://pyrefly.org/blog/2025/09/15/ide-extension/#conclusion" class="hash-link" aria-label="Direct link to conclusion" title="Direct link to conclusion">​</a></h2>
<p>As Python projects continue to grow in size and complexity, having a fast, reliable, and scalable language server is essential for maintaining developer productivity (and our sanity to be honest). So if you’re working on a large codebase and want an LSP designed with scalability in mind we invite you to give Pyrefly a try!</p>
<p>While the project is still in Alpha we’re especially eager to hear from more users like you about how the IDE extension performs on real world codebases. If you have any feedback, bug reports or feature requests please feel free to <a href="https://github.com/facebook/pyrefly/issues" target="_blank" rel="noopener noreferrer">open a GitHub issue</a>, and if you have any questions or need support please come chat with us on <a href="https://discord.com/invite/Cf7mFQtW7W" target="_blank" rel="noopener noreferrer">Discord</a>!</p>
<p>Happy coding, fellow pyreflies! 🔥🪰</p>]]></content>
        <author>
            <name>Abby Mitchell</name>
            <uri>https://github.com/javabster</uri>
        </author>
        <author>
            <name>Kyle Into</name>
            <uri>https://www.kylei.dev/</uri>
        </author>
        <category label="language-server" term="language-server"/>
        <category label="IDE" term="IDE"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why Today’s Python Developers Are Embracing Type Hints]]></title>
        <id>https://pyrefly.org/blog/why-typed-python/</id>
        <link href="https://pyrefly.org/blog/why-typed-python/"/>
        <updated>2025-08-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What is Typed Python? Why is it important for Python developers today? How to can you get started?]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" src="https://pyrefly.org/assets/images/why-typing-blog-6798a36e31db2a87069bd3636c0c97c2.png" width="1849" height="1201" class="img_ev3q"></p>
<p>Python is one of the most successful programming languages out there, with it recently overtaking Javascript as the most popular language on GitHub, according to the latest <a href="https://github.blog/news-insights/octoverse/octoverse-2024/" target="_blank" rel="noopener noreferrer">GitHub Octoverse report</a>. The report emphasises the popularity of the language in the growing fields of AI, data science and scientific computing - fields where speedy experimentation and iteration are critical, and where developers are coming from a broad range of STEM backgrounds, not necessarily computer science. But as the Python community expands and projects grow from experiments to production systems, that same flexibility can become a liability.</p>
<p>That’s why today we’re going to talk about typed Python - what it is, why it’s become important for Python developers today, and how to get started using it to write higher quality, more reliable code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-typed-python">What is Typed Python?<a href="https://pyrefly.org/blog/why-typed-python/#what-is-typed-python" class="hash-link" aria-label="Direct link to What is Typed Python?" title="Direct link to What is Typed Python?">​</a></h2>
<p>Before we dive into why you should be using typed Python in your daily development lives, first we need to understand some core concepts and how we got here.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dynamic-vs-static-typing">Dynamic vs static typing<a href="https://pyrefly.org/blog/why-typed-python/#dynamic-vs-static-typing" class="hash-link" aria-label="Direct link to Dynamic vs static typing" title="Direct link to Dynamic vs static typing">​</a></h3>
<p>The classic Python programming language that you know and love is <em>dynamically typed</em>. What does that mean exactly? It means that types are determined at runtime, not when you write your code. Variables can hold any type of value, and you don't need to declare what type they are.</p>
<p>Here’s an example of dynamic typing in action:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">5</span><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)"># x is an integer</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"hello"</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># now x is a string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># now x is a list</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This behaviour is one of the things that sets Python apart from languages that are <em>statically typed</em>, like Java or C++, which require you to declare types from the get go:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> x </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">std</span><span class="token operator">::</span><span class="token plain">string x_str </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"hello"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">std</span><span class="token operator">::</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token plain"> x_vec </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the above example we can’t just reassign the variable <code>x</code> to a value of whatever type we want, it can only hold an integer because of the static typing nature of the C++ language.</p>
<p>The fact that Python is a dynamically typed language is one of the reasons it is so easy to use and popular amongst new and experienced programmers alike. It makes it easy to develop quick demos, experimental research and proof of concepts, without needing to spend precious development time declaring types. This flexibility has been instrumental in Python's adoption in AI, data science, and scientific computing, where researchers need to rapidly iterate and experiment with different approaches.</p>
<p>However… (surely you knew there was a “but” coming?)</p>
<p>We are quickly moving past the “proof-of-concept” phase for many of these industries. AI and machine learning efforts are actively being integrated into production applications, and with that comes production-level expectations of reliability and stability. Relying on dynamic typing opens these codebases up to a certain level of risk that may not be acceptable at the scale they are now expected to operate.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="enter-pep-484-static-typing-comes-to-python">Enter PEP 484: Static Typing Comes to Python<a href="https://pyrefly.org/blog/why-typed-python/#enter-pep-484-static-typing-comes-to-python" class="hash-link" aria-label="Direct link to Enter PEP 484: Static Typing Comes to Python" title="Direct link to Enter PEP 484: Static Typing Comes to Python">​</a></h3>
<p>Cast your mind back to September 2014: Germany has just won the world cup, skinny jeans are still in fashion and Taylor Swift’s “Shake it Off” is number 1 on the charts. That same month <a href="https://peps.python.org/pep-0484/" target="_blank" rel="noopener noreferrer">PEP 484</a> was first created, proposing the addition of type hints to Python, and fundamentally changing how future developers would be able to write and maintain Python code.</p>
<p>With PEP 484’s acceptance and introduction in Python 3.5, developers could now use static type annotations to declare the expected data types of function arguments and return values, and <a href="https://pyrefly.org/en/docs/python-features-and-peps/" target="_blank" rel="noopener noreferrer">subsequent PEPs have continually added more features</a> to expand and refine Python's type system. Today you can write statically typed Python statements like this:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">my_func</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">bool</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    z</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> z </span><span class="token operator">==</span><span class="token plain"> y</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The key innovation of PEP 484 was introducing a <em>gradual</em> type system that allows developers to slowly add type annotations over time without breaking existing code. The system works by:</p>
<ul>
<li>Only type-checking functions that have explicit return or parameter annotations</li>
<li>Introducing the <code>Any</code> type as an escape hatch that has all possible attributes</li>
<li>Assuming untyped functions implicitly return <code>Any</code></li>
</ul>
<p>This approach has meant developers can incrementally adopt typing, while still allowing them to take advantage of the default dynamic typing approach that makes Python so easy to work with and ideal for quick prototyping.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="benefits-of-python-type-hints-write-better-code-faster">Benefits of Python Type Hints: Write Better Code, Faster<a href="https://pyrefly.org/blog/why-typed-python/#benefits-of-python-type-hints-write-better-code-faster" class="hash-link" aria-label="Direct link to Benefits of Python Type Hints: Write Better Code, Faster" title="Direct link to Benefits of Python Type Hints: Write Better Code, Faster">​</a></h2>
<p>So why specifically should you start using type hints in your Python code? Python type hints offer a range of advantages that can significantly improve the quality, maintainability, and scalability of your codebase, at the same time making it easier for other developers to understand your code and collaborate with you.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="types-help-you-catch-bugs-early">Types help you catch bugs early<a href="https://pyrefly.org/blog/why-typed-python/#types-help-you-catch-bugs-early" class="hash-link" aria-label="Direct link to Types help you catch bugs early" title="Direct link to Types help you catch bugs early">​</a></h3>
<p>Type hints assist static analysis tools in identifying mismatches and potential errors before the code is executed, allowing for early bug detection. Take the following example:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">add_numbers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">       </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> a </span><span class="token operator">+</span><span class="token plain"> b</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">add_numbers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"4"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># Potential error</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The above error might be easy to spot when you’re calling the function so close to where you’re defining it, but imagine you’re working across multiple files and/or with many lines of code separating them - suddenly it’s not so easy!</p>
<p>In comparison, if you’re using type hints in conjunction with a typechecking tool (such as Pyrefly or MyPy), you can catch this error much earlier - when you’re actually writing the code, rather than when it fails at runtime:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">add_numbers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> a </span><span class="token operator">+</span><span class="token plain"> b</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">add_numbers</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"4"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># a typechecker will catch this error at time of writing</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Using a typechecker to highlight these types of errors also ensures you can catch an error like this even if you’ve missed this code path in your unit tests.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="typed-code-is-self-documenting">Typed code is self-documenting<a href="https://pyrefly.org/blog/why-typed-python/#typed-code-is-self-documenting" class="hash-link" aria-label="Direct link to Typed code is self-documenting" title="Direct link to Typed code is self-documenting">​</a></h3>
<p>Another benefit of writing typed Python is that using function signatures and variable annotations provide clarity of intent for a given piece of code. In other words, it makes code easier to read and review. It makes refactoring safer and more predictable. It even helps new team members get up to speed quickly on what’s going on in your codebase without wasting their own time, or yours!</p>
<p>Take the following example, without type hints you have to carefully read the internal function code to understand what type of parameters will work and what will be returned:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">calculate_stats</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> weights</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    total </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    weighted_sum </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> value </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">enumerate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> i </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">weights</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            weighted_sum </span><span class="token operator">+=</span><span class="token plain"> value </span><span class="token operator">*</span><span class="token plain"> weights</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            total </span><span class="token operator">+=</span><span class="token plain"> weights</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    avg </span><span class="token operator">=</span><span class="token plain"> weighted_sum </span><span class="token operator">/</span><span class="token plain"> total </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> total </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> avg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>With this version, you can tell instantly what type of arguments you should be passing and what you should expect to get back - saving precious dev time and just generally making your life easier:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">calculate_stats</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">list</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">float</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> weights</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">list</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">float</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">tuple</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">float</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    total </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    weighted_sum </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> value </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">enumerate</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> i </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">weights</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            weighted_sum </span><span class="token operator">+=</span><span class="token plain"> value </span><span class="token operator">*</span><span class="token plain"> weights</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            total </span><span class="token operator">+=</span><span class="token plain"> weights</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    avg </span><span class="token operator">=</span><span class="token plain"> weighted_sum </span><span class="token operator">/</span><span class="token plain"> total </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> total </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> avg</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I know I know - ideally all developers should be adding clear docstrings with every function they write, but we know in reality it doesn’t always shape up that way! Adding type hints is quicker than writing a typical docstring, won’t go stale (if enforced using a typechecker) and is better than no documentation at all. Modern Python typecheckers also have <a href="https://pyrefly.org/en/docs/IDE/" target="_blank" rel="noopener noreferrer">IDE extensions</a> that include autocomplete functionality to make life easier.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="typed-python-helps-you-scale-from-proof-of-concept-to-production-ready">Typed Python helps you scale from proof-of-concept to production-ready<a href="https://pyrefly.org/blog/why-typed-python/#typed-python-helps-you-scale-from-proof-of-concept-to-production-ready" class="hash-link" aria-label="Direct link to Typed Python helps you scale from proof-of-concept to production-ready" title="Direct link to Typed Python helps you scale from proof-of-concept to production-ready">​</a></h3>
<p>One of the most important benefits of using type annotations in your code is that it helps you scale your code faster and with less risk. For developers today, the pipeline from experimental code to production systems moves faster than ever, especially in AI and machine learning workflows where research prototypes must quickly evolve into robust, scalable applications.</p>
<p>For example, say there is a team of data scientists that has just published their findings and now needs to operationalize their models. If their published code already includes type hints it makes it much easier, quicker and safer for an engineering team to step in and integrate that research into production applications. In situations like these, type annotations act as a contract between different stages of development, making it clear how data flows through complex, multi-step processing pipelines. This is particularly valuable in AI workflows where a single type mismatch, like passing a NumPy array where a PyTorch tensor is expected, can cause silent failures or performance degradation that only surfaces under production load.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started-with-typed-python-today">Get Started with Typed Python today!<a href="https://pyrefly.org/blog/why-typed-python/#get-started-with-typed-python-today" class="hash-link" aria-label="Direct link to Get Started with Typed Python today!" title="Direct link to Get Started with Typed Python today!">​</a></h2>
<p>So now you know what typed python is and why you should be doing it, how can you actually get started adding types to your code?</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-0---start-early">Step 0 - start early!<a href="https://pyrefly.org/blog/why-typed-python/#step-0---start-early" class="hash-link" aria-label="Direct link to Step 0 - start early!" title="Direct link to Step 0 - start early!">​</a></h3>
<p>As a general rule of thumb, the earlier in a project you start adding type annotations the better.
Type hints are much easier to add as you go than to retrofit across an entire codebase later.</p>
<p>As we’ve mentioned before, one of the great benefits of Python is that its dynamic typing default makes it very flexible and easy to get started with. So when you’re doing your initial experimentation and prototyping maybe you’re not thinking about making sure it’s type safe - and that’s ok! But as soon as you start to think your project might be going somewhere, if more than one person might be working on it, using it or just reading it, you should start adding type hints.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-1---install-a-type-checker">Step 1 - install a type checker<a href="https://pyrefly.org/blog/why-typed-python/#step-1---install-a-type-checker" class="hash-link" aria-label="Direct link to Step 1 - install a type checker" title="Direct link to Step 1 - install a type checker">​</a></h3>
<p>Choose and install a type checker that fits your needs. Typecheckers leverage the code annotations you write to provide important errors and warnings to ensure your codebase is type safe.</p>
<p>At Meta, we recommend <a href="https://pyrefly.org/" target="_blank" rel="noopener noreferrer">Pyrefly</a>, our new open-source type checker built in Rust. Pyrefly is designed to scale from small projects to massive codebases incredibly fast, while providing excellent developer experience. Read the <a href="https://pyrefly.org/en/docs/" target="_blank" rel="noopener noreferrer">Pyrefly documentation</a> to understand configuration options and best practices, then start adding simple type hints to new functions before gradually working your way up to more complex scenarios.</p>
<p>You should also consider working with a typechecker that <a href="https://pyrefly.org/en/docs/IDE/" target="_blank" rel="noopener noreferrer">supports IDE integration</a> to get real-time feedback as you write code. Pyrefly provides extensions for editors like VS Code, PyCharm, and Vim which will highlight errors and provide autocomplete suggestions based on your type annotations.</p>
<p>Adding your typechecker to your CI processes is also valuable for maintaining code quality at scale. You can <a href="https://pyrefly.org/en/docs/installation/#add-pyrefly-to-ci" target="_blank" rel="noopener noreferrer">configure your CI/CD pipeline to run type checking</a> on every pull request, treating type errors as build failures.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-2---make-use-of-resources-to-get-better-at-typing">Step 2 - make use of resources to get better at typing<a href="https://pyrefly.org/blog/why-typed-python/#step-2---make-use-of-resources-to-get-better-at-typing" class="hash-link" aria-label="Direct link to Step 2 - make use of resources to get better at typing" title="Direct link to Step 2 - make use of resources to get better at typing">​</a></h3>
<p>Typing is one of those skills that gets better the more you practice it in your code, but there are also great resources out there for getting to grips with the functionality and diving deeper into the concepts:</p>
<ul>
<li>Official <a href="https://docs.python.org/3/library/typing.html" target="_blank" rel="noopener noreferrer">Python typing</a> documentation - The typing module docs provide comprehensive coverage of all available types</li>
<li><a href="https://pyrefly.org/en/docs/python-features-and-peps/" target="_blank" rel="noopener noreferrer">PEP 484 and related PEPs</a> - Understanding the foundational specifications helps you grasp the "why" behind typing decisions</li>
<li>Documentation for your chosen typechecker, e.g. <a href="https://pyrefly.org/en/docs/typing-for-python-developers/" target="_blank" rel="noopener noreferrer">Pyrefly Docs on learning typing</a></li>
<li>Join community forums and get support, e.g. <a href="https://discord.gg/Cf7mFQtW7W" target="_blank" rel="noopener noreferrer">Pyrefly Discord</a>, <a href="https://discuss.python.org/c/typing" target="_blank" rel="noopener noreferrer">Typing Discourse</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://pyrefly.org/blog/why-typed-python/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>So there you have it - a quick trip around the world of Python typing! By now you’ve hopefully learnt that type hints aren't just another Python feature to add to the long list of things you’ll <em>definitely</em> get round to implementing eventually - they're a practical investment in your code's future. The upfront effort of adding type hints pays dividends in reduced debugging sessions, smoother code reviews, and fewer production issues. Most importantly, they give you the confidence to refactor and scale your codebase without fear of breaking things in unexpected ways. Start small by adding type annotations to your next function, add a type checker to your workflow, and before you know it writing typed Python will be second nature. Your future self (and your users and teammates!) will thank you.</p>]]></content>
        <author>
            <name>Abby Mitchell</name>
            <uri>https://github.com/javabster</uri>
        </author>
        <author>
            <name>Pyrefly Team</name>
            <uri>https://github.com/facebook/pyrefly</uri>
        </author>
        <category label="typechecking" term="typechecking"/>
        <category label="python-typing-basics" term="python-typing-basics"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing Pyrefly - A new type checker and IDE experience for Python]]></title>
        <id>https://pyrefly.org/blog/introducing-pyrefly/</id>
        <link href="https://pyrefly.org/blog/introducing-pyrefly/"/>
        <updated>2025-05-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Today we are announcing an alpha version of Pyrefly, an open source Python typechecker and IDE extension crafted in Rust]]></summary>
        <content type="html"><![CDATA[
<p><img decoding="async" loading="lazy" alt="Pyrefly Intro" src="https://pyrefly.org/assets/images/pyrefly_intro-29fb0e2d54b79ced50ee1065dc4a2a4d.webp" width="2242" height="1260" class="img_ev3q"></p>
<p>Today we are announcing an alpha version of Pyrefly, an open source Python typechecker and IDE extension crafted in Rust. Pyrefly is a static type checker that analyzes Python code to ensure type consistency and help you catch errors throughout your codebase before your code runs. It also supports IDE integration and CLI usage to give you flexibility in how you incorporate it into your workflow.</p>
<p>The open source community is the backbone of the Python language. We are eager to collaborate on Pyrefly with the community and improve Python’s type system and the many libraries that we all rely on.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started">Get started<a href="https://pyrefly.org/blog/introducing-pyrefly/#get-started" class="hash-link" aria-label="Direct link to Get started" title="Direct link to Get started">​</a></h2>
<p>Ready to dive in? The <a href="https://pyrefly.org/" target="_blank" rel="noopener noreferrer">official Pyrefly website</a> has all the details, but to quickly get started:</p>
<ul>
<li><a href="https://pyrefly.org/en/docs/installation/" target="_blank" rel="noopener noreferrer">Install</a> Pyrefly on the command-line: pip install pyrefly.</li>
<li><a href="https://pyrefly.org/en/docs/migrating-to-pyrefly/" target="_blank" rel="noopener noreferrer">Migrate your existing type checker configuration to Pyrefly</a>.</li>
<li>Enhance Your IDE: Download the <a href="https://marketplace.visualstudio.com/items?itemName=meta.pyrefly" target="_blank" rel="noopener noreferrer">Pyrefly extension for VSCode</a> and enjoy a lightning fast IDE experience from starter projects to monorepos.</li>
<li>Leave feedback for us on <a href="https://github.com/facebook/pyrefly/issues" target="_blank" rel="noopener noreferrer">GitHub</a>.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-we-built-pyrefly">Why we built Pyrefly<a href="https://pyrefly.org/blog/introducing-pyrefly/#why-we-built-pyrefly" class="hash-link" aria-label="Direct link to Why we built Pyrefly" title="Direct link to Why we built Pyrefly">​</a></h2>
<p>Back in 2017, we embarked on a mission to create a type checker that could handle <a href="https://instagram-engineering.com/web-service-efficiency-at-instagram-with-python-4976d078e366" target="_blank" rel="noopener noreferrer">Instagram’s massive codebas</a> of typed Python. This mission led to the birth of the <a href="https://github.com/facebook/pyre-check" target="_blank" rel="noopener noreferrer">Pyre</a> type checker, inspired by the robust designs of <a href="https://hacklang.org/" target="_blank" rel="noopener noreferrer">Hack</a> and <a href="https://flow.org/" target="_blank" rel="noopener noreferrer">Flow</a>, and written in OCaml to deliver scalable performance.</p>
<p>Over the years, Pyre served us well, but as the type system evolved and the need for typechecking to drive responsive IDE emerged, it was clear that we needed to take a new approach. We explored alternate solutions and leveraged community tools like <a href="https://github.com/Microsoft/pyright" target="_blank" rel="noopener noreferrer">Pyright</a> for code navigation. But the need for an extensible type checker that can bring code navigation, checking at scale, and exporting types to other services drove us to start over, creating Pyrefly.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-principles-behind-pyrefly">The principles behind Pyrefly<a href="https://pyrefly.org/blog/introducing-pyrefly/#the-principles-behind-pyrefly" class="hash-link" aria-label="Direct link to The principles behind Pyrefly" title="Direct link to The principles behind Pyrefly">​</a></h2>
<p>Today, we’re excited to unveil Pyrefly, a project <a href="https://github.com/facebook/pyrefly" target="_blank" rel="noopener noreferrer">we’ve been developing openly on GitHub</a>. We invite you to explore our work and try it out on your own project. While a project like Pyrefly is the sum of thousands of technical choices, a few notable principles we’ve followed are:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="performance">Performance<a href="https://pyrefly.org/blog/introducing-pyrefly/#performance" class="hash-link" aria-label="Direct link to Performance" title="Direct link to Performance">​</a></h3>
<p>We want to shift checks that used to happen later on CI to happening on every single keystroke. That requires checking code at speed (on large codebases we can check 1.8 million lines of code per second!) and careful thought to incrementality and updates. Pyrefly is implemented in Rust and designed for high performance on codebases of all sizes.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ide-first">IDE first<a href="https://pyrefly.org/blog/introducing-pyrefly/#ide-first" class="hash-link" aria-label="Direct link to IDE first" title="Direct link to IDE first">​</a></h3>
<p>We want the IDE and command line to share a consistent view of the world, which means crafting abstractions that capture the differences without incurring unnecessary costs. Designing these abstractions from the beginning is much easier than retrofitting them, which we tried with Pyre.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="inference">Inference<a href="https://pyrefly.org/blog/introducing-pyrefly/#inference" class="hash-link" aria-label="Direct link to Inference" title="Direct link to Inference">​</a></h3>
<p>Some <a href="https://engineering.fb.com/2024/12/09/developer-tools/typed-python-2024-survey-meta/" target="_blank" rel="noopener noreferrer">Python programs are typed</a>, but many aren’t. We want users to benefit from types even if they haven’t annotated their code – so automatically infer types for returns and local variables and display them in the IDE. What’s more, in the IDE you can even double click to insert these inferred types if you think that would make the program better.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="open-source">Open source<a href="https://pyrefly.org/blog/introducing-pyrefly/#open-source" class="hash-link" aria-label="Direct link to Open source" title="Direct link to Open source">​</a></h3>
<p>Python is open source, and hugely popular. The <a href="https://typing.python.org/en/latest/spec/" target="_blank" rel="noopener noreferrer">Python typing specification</a> is open source, which made Pyrefly vastly easier to develop. Many of the libraries Meta contributes to are open source,( e.g., <a href="https://pytorch.org/" target="_blank" rel="noopener noreferrer">PyTorch</a>).</p>
<p>Pyrefly is also open source, <a href="https://github.com/facebook/pyrefly/" target="_blank" rel="noopener noreferrer">available on GitHub</a> under the <a href="https://github.com/facebook/pyrefly/blob/main/LICENSE" target="_blank" rel="noopener noreferrer">MIT license</a>, and we encourage <a href="https://github.com/facebook/pyrefly/pulls" target="_blank" rel="noopener noreferrer">pull requests</a> and <a href="https://github.com/facebook/pyrefly/issues" target="_blank" rel="noopener noreferrer">issue reports</a>. We also have a <a href="https://discord.gg/Cf7mFQtW7W" target="_blank" rel="noopener noreferrer">Discord channel</a> for more free flowing discussions. We would love to build a community around Pyrefly.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-future-of-pyrefly">The future of Pyrefly<a href="https://pyrefly.org/blog/introducing-pyrefly/#the-future-of-pyrefly" class="hash-link" aria-label="Direct link to The future of Pyrefly" title="Direct link to The future of Pyrefly">​</a></h2>
<p>We will work with the Python community to drive the language forward and improve the developer experience. Since the beginning of Pyre, we open sourced our code and contributed a number of PEPs alongside the community of type checker maintainers. We feel we can do more with Pyrefly to help Python developers leverage the benefits of types for developers, library authors, and folks just learning the language.</p>
<p>Meta has leveraged types in dynamic languages from the beginning and knows the significant benefits it brings to developer productivity and security. We plan to share more of our learnings and tooling with <a href="https://engineering.fb.com/2024/12/09/developer-tools/typed-python-2024-survey-meta/" target="_blank" rel="noopener noreferrer">blogs</a>, better types in the ecosystem and language enhancements.</p>
<p>Today we’re releasing Pyrefly as an alpha. At the same time, we’re busy burning down the long-tail of bugs and features aiming to remove the alpha label this Summer. Your feedback is invaluable to get there, so please give it a try and <a href="https://github.com/facebook/pyrefly/issues" target="_blank" rel="noopener noreferrer">report your bugs</a> or things you think can be improved. Even if Pyrefly isn’t right for your project, we would love to hear how you use types and what you would like to see improved in your editor.</p>
<p>Join us on the journey as we help illuminate your bugs with Pyrefly. Happy coding! 🐍✨</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="hear-more-about-pyrefly">Hear more about Pyrefly<a href="https://pyrefly.org/blog/introducing-pyrefly/#hear-more-about-pyrefly" class="hash-link" aria-label="Direct link to Hear more about Pyrefly" title="Direct link to Hear more about Pyrefly">​</a></h2>
<p>Check out the <a href="https://engineering.fb.com/2025/05/15/developer-tools/open-sourcing-pyrefly-a-faster-python-type-checker-written-in-rust" target="_blank" rel="noopener noreferrer">episode of the Meta Tech Podcast</a> where several team members share their experience developing Pyrefly and technical details for how it works. We also just <a href="https://us.pycon.org/2025/schedule/presentation/118/" target="_blank" rel="noopener noreferrer">talked at PyCon US</a> about high-performance Python through faster type checking and free threaded execution.</p>
<p>To learn more about Meta Open Source, visit our<a href="https://opensource.fb.com/" target="_blank" rel="noopener noreferrer">open source site</a>, subscribe to our <a href="https://www.youtube.com/channel/UCCQY962PmHabTjaHv2wJzfQ" target="_blank" rel="noopener noreferrer">YouTube channel</a>, or follow us on <a href="https://www.facebook.com/MetaOpenSource" target="_blank" rel="noopener noreferrer">Facebook</a>, <a href="https://www.threads.net/@metaopensource" target="_blank" rel="noopener noreferrer">Threads</a>, <a href="https://x.com/MetaOpenSource" target="_blank" rel="noopener noreferrer">X</a>, and <a href="https://www.linkedin.com/showcase/meta-open-source?fbclid=IwZXh0bgNhZW0CMTEAAR2fEOJNb7zOi8rJeRvQry5sRxARpdL3OpS4sYLdC1_npkEy60gBS1ynXwQ_aem_mJUK6jEUApFTW75Emhtpqw" target="_blank" rel="noopener noreferrer">LinkedIn</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="acknowledgements">Acknowledgements<a href="https://pyrefly.org/blog/introducing-pyrefly/#acknowledgements" class="hash-link" aria-label="Direct link to Acknowledgements" title="Direct link to Acknowledgements">​</a></h3>
<p><em>Pyrefly was created By Meta’s Python Language Tooling Team: Jia Chen, Rebecca Chen, Sam Goldman, David Luo, Kyle Into, Zeina Migeed, Neil Mitchell, Maggie Moss, Conner Nilsen, Aaron Pollack, Teddy Sudol, Steven Troxler, Lucian Wischik, Danny Yang, and Sam Zhou.</em></p>]]></content>
        <author>
            <name>Pyrefly Team</name>
            <uri>https://github.com/facebook/pyrefly</uri>
        </author>
        <category label="typechecking" term="typechecking"/>
        <category label="news" term="news"/>
    </entry>
</feed>