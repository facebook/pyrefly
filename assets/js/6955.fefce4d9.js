"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[6955],{31888:(e,n,t)=>{t.d(n,{A:()=>o});var i=t(35363),s=t(96540),r=(t(32855),t(74848));const l=s.lazy((()=>Promise.all([t.e(1869),t.e(8285),t.e(5572)]).then(t.bind(t,5572))));function o(e){let{sampleFilename:n,codeSample:t=""}=e;if(null==n)throw"Missing sampleFilename. IDE services won't work properly.";const[o,a]=s.useState(!1),[c,h]=s.useState(!1),d=s.useRef(null);return s.useEffect((()=>{if("undefined"==typeof window)return;if(!d.current)return;const e=new IntersectionObserver((e=>{const n=e[0];a(n.isIntersecting),n.isIntersecting&&h(!0)}),{rootMargin:"500px 0px",threshold:.1});return e.observe(d.current),()=>e.disconnect()}),[]),(0,r.jsxs)("div",{ref:d,className:"x1717udv x1ghz6dp",children:[!c&&(0,r.jsx)("div",{className:"xh8yej3 x5yr21d x126k92a xysyzu8 x1tamke2 x1ybsatz x1sp1r08",children:(0,r.jsx)("div",{className:"xb3r6kr x1n2onr6 xif65rj x1iwq0vh",children:t})}),c&&(0,r.jsx)("pre",{className:"xqid1ag x1rea2x4 x1n2onr6 x7ywyr2",children:(0,r.jsx)(i.A,{children:()=>(0,r.jsx)(s.Suspense,{fallback:(0,r.jsx)("div",{children:"Loading..."}),children:(0,r.jsx)(l,{sampleFilename:n,isCodeSnippet:!0,codeSample:t,isInViewport:o})})})})]})}},32855:(e,n,t)=>{t.d(n,{xk:()=>a});var i,s={};var r=function(){if(i)return s;i=1,Object.defineProperty(s,"__esModule",{value:!0}),s.styleq=void 0;var e=new WeakMap;function n(n){var t,i,s;return null!=n&&(t=!0===n.disableCache,i=!0===n.disableMix,s=n.transform),function(){for(var n=[],r="",l=null,o="",a=t?null:e,c=new Array(arguments.length),h=0;h<arguments.length;h++)c[h]=arguments[h];for(;c.length>0;){var d=c.pop();if(null!=d&&!1!==d)if(Array.isArray(d))for(var p=0;p<d.length;p++)c.push(d[p]);else{var u=null!=s?s(d):d;if(null!=u.$$css){var y="";if(null!=a&&a.has(u)){var x=a.get(u);null!=x&&(y=x[0],o=x[2],n.push.apply(n,x[1]),a=x[3])}else{var m=[];for(var g in u){var f=u[g];if("$$css"!==g)"string"==typeof f||null===f?n.includes(g)||(n.push(g),null!=a&&m.push(g),"string"==typeof f&&(y+=y?" "+f:f)):console.error("styleq: ".concat(g," typeof ").concat(String(f),' is not "string" or "null".'));else{var j=u[g];!0!==j&&(o=o?j+"; "+o:j)}}if(null!=a){var b=new WeakMap;a.set(u,[y,m,o,b]),a=b}}y&&(r=r?y+" "+r:y)}else if(i)null==l&&(l={}),l=Object.assign({},u,l);else{var w=null;for(var v in u){var T=u[v];void 0!==T&&(n.includes(v)||(null!=T&&(null==l&&(l={}),null==w&&(w={}),w[v]=T),n.push(v),a=null))}null!=w&&(l=Object.assign(w,l))}}}return[r,l,o]}}return(s.styleq=n()).factory=n,s}();const l=e=>new Error(`Unexpected 'stylex.${e}' call at runtime. Styles must be compiled by '@stylexjs/babel-plugin'.`),o=e=>l(`types.${e}`);function a(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];const[i,s,l]=r.styleq(n),o={};return null!=i&&""!==i&&(o.className=i),null!=s&&Object.keys(s).length>0&&(o.style=s),null!=l&&""!==l&&(o["data-style-src"]=l),o}const c={angle:e=>{throw o("angle")},color:e=>{throw o("color")},url:e=>{throw o("url")},image:e=>{throw o("image")},integer:e=>{throw o("integer")},lengthPercentage:e=>{throw o("lengthPercentage")},length:e=>{throw o("length")},percentage:e=>{throw o("percentage")},number:e=>{throw o("number")},resolution:e=>{throw o("resolution")},time:e=>{throw o("time")},transformFunction:e=>{throw o("transformFunction")},transformList:e=>{throw o("transformList")}};function h(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];const[i]=r.styleq(n);return i}h.attrs=function(){const{className:e,"data-style-src":n,style:t}=a(...arguments),i={};return null!=e&&""!==e&&(i.class=e),null!=t&&Object.keys(t).length>0&&(i.style=Object.keys(t).map((e=>`${e}:${t[e]};`)).join("")),null!=n&&""!==n&&(i["data-style-src"]=n),i},h.create=function(e){throw l("create")},h.createTheme=(e,n)=>{throw l("createTheme")},h.defineVars=function(e){throw l("defineVars")},h.firstThatWorks=function(){throw l("firstThatWorks")},h.keyframes=e=>{throw l("keyframes")},h.props=a,h.types=c},35363:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var i=t(9136),s=t(74848);function r(e){let{children:n,fallback:t}=e;return(0,i.default)()?(0,s.jsx)(s.Fragment,{children:n?.()}):t??null}},56955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"python-typing-for-beginners","title":"Python Typing for New Developers","description":"A gentle, example\u2011driven introduction to static type hints in Python.","source":"@site/docs/python-typing-for-beginners.mdx","sourceDirName":".","slug":"/python-typing-for-beginners","permalink":"/en/docs/python-typing-for-beginners","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/python-typing-for-beginners.mdx","tags":[],"version":"current","frontMatter":{"title":"Python Typing for New Developers","description":"A gentle, example\u2011driven introduction to static type hints in Python."},"sidebar":"docsSidebar","previous":{"title":"Typing for Python Developers","permalink":"/en/docs/typing-for-python-developers"},"next":{"title":"Typing Features and PEPS","permalink":"/en/docs/python-features-and-peps"}}');var s=t(74848),r=t(28453),l=t(31888);const o={title:"Python Typing for New Developers",description:"A gentle, example\u2011driven introduction to static type hints in Python."},a="Python Typing for New Developers",c={},h=[{value:"1. What is a Type?",id:"1-what-is-a-type",level:2},{value:"2. What is a Type Hint in Python?",id:"2-what-is-a-type-hint-in-python",level:2},{value:"3. Why Bother with Type Hints?",id:"3-why-bother-with-type-hints",level:2},{value:"Can you spot the bug?",id:"can-you-spot-the-bug",level:3},{value:"4. Primitive Types",id:"4-primitive-types",level:2},{value:"5. Collections",id:"5-collections",level:2},{value:"Syntax\tExamples",id:"syntaxexamples",level:3},{value:"6. Functions",id:"6-functions",level:2},{value:"7. Get Type Hint Signals Directly in Your Editor",id:"7-get-type-hint-signals-directly-in-your-editor",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"python-typing-for-new-developers",children:"Python Typing for New Developers"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"A beginner\u2011friendly guide to adding type hints in Python."})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," This tutorial assumes you understand some basic Python syntax, but are new to programming or type hints. To learn more about Python, see the ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/tutorial/",children:"Python Tutorial"})," and ",(0,s.jsx)(n.a,{href:"https://www.python.org/about/gettingstarted/",children:"Getting Started Guide"})]}),"\n",(0,s.jsx)(n.h2,{id:"1-what-is-a-type",children:"1. What is a Type?"}),"\n",(0,s.jsx)(n.p,{children:"A type is a classification that defines what operations can be performed on a piece of data, what values it can hold, and how it behaves in memory. Types are fundamental to programming because they help ensure that operations on data make sense."}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["An ",(0,s.jsx)(n.code,{children:"int"})," (integer) type can be added, subtracted, or multiplied"]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"str"})," (string) type can be concatenated or split"]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"list"})," type can be indexed, sliced, or iterated over"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," These are just examples of common operations for each data type. Python's built-in types support many more operations that are not listed here."]}),"\n",(0,s.jsx)(n.p,{children:"Understanding types helps you predict how your code will behave and avoid runtime errors from trying to perform operations that don't make sense, such as dividing a string by a number."}),"\n",(0,s.jsx)(n.h2,{id:"2-what-is-a-type-hint-in-python",children:"2. What is a Type Hint in Python?"}),"\n",(0,s.jsx)(n.p,{children:"A type hint in Python is a way to indicate the expected data type of a variable, function parameter, or return value. It's a hint to other developers (and to tools like type checkers and IDEs) about what type of data should be used with a particular piece of code."}),"\n",(0,s.jsxs)(n.p,{children:["Type hints are ",(0,s.jsx)(n.strong,{children:"not enforced at runtime by Python itself,"})," but they can be used by third-party tools (like Pyrefly) to catch type-related errors before your code runs. They also serve as documentation, making it easier for others to understand how to use your code.\nHere's an example of a simple function with type hints:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'def greet(name: str) -> None:\n    print(f"Hello, {name}!")\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name: str"})," indicates that the ",(0,s.jsx)(n.code,{children:"name"})," parameter should be a string."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-> None"})," specifies that the function doesn't return any value (similar to ",(0,s.jsx)(n.code,{children:"void"})," in other languages)."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"3-why-bother-with-type-hints",children:"3. Why Bother with Type Hints?"}),"\n",(0,s.jsx)(n.p,{children:"Python is a dynamically typed language, which means you can write code without declaring types. However, this can lead to bugs or ambiguity in your code."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"TL;DR"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Catch bugs ",(0,s.jsx)(n.strong,{children:"before"})," running the code."]}),"\n",(0,s.jsx)(n.li,{children:"Improve editor autocomplete & refactors."}),"\n",(0,s.jsx)(n.li,{children:"Turn your code into living documentation."}),"\n"]}),"\n",(0,s.jsx)(l.A,{sampleFilename:"why_hints.py",codeSample:'# Without hints \u2013 is "times" a str, int, or list?\ndef repeat(text, times):\n  return text * times\n\n# With hints \u2013 intent is crystal clear.\ndef repeat(text: str, times: int) -> str:\n  return text * times\n'}),"\n",(0,s.jsx)(n.p,{children:"In this example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The first function lacks type hints, making it unclear what types ",(0,s.jsx)(n.code,{children:"text"})," and ",(0,s.jsx)(n.code,{children:"times"})," should be. The ",(0,s.jsx)(n.code,{children:"*"})," operator works differently depending on types (string repetition, list repetition, or multiplication)."]}),"\n",(0,s.jsxs)(n.li,{children:["The second function uses type hints to clearly indicate that ",(0,s.jsx)(n.code,{children:"text"})," should be a string, ",(0,s.jsx)(n.code,{children:"times"})," should be an integer, and the function returns a string."]}),"\n",(0,s.jsxs)(n.li,{children:["This clarity helps prevent bugs like accidentally passing a string for ",(0,s.jsx)(n.code,{children:"times"})," or using the function incorrectly."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"can-you-spot-the-bug",children:"Can you spot the bug?"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"class Rectangle:\n    width: int\n    height: int\n\n    def __init__(self, width: int, height: int) -> None:\n        self.width = width\n        self.height = height\n\nrect = Rectangle(width=100, height=50)\n\narea = rect.width * rect.hieght\n\nprint(area)\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The bug is a typo in ",(0,s.jsx)(n.code,{children:"rect.hieght"})," (should be ",(0,s.jsx)(n.code,{children:"rect.height"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"Without type hints, Python would only report this error at runtime when it tries to access the non-existent attribute."}),"\n",(0,s.jsxs)(n.li,{children:["With type hints and a tool like Pyrefly, this error would be caught before running the code because the ",(0,s.jsx)(n.code,{children:"Rectangle"})," class has defined attributes ",(0,s.jsx)(n.code,{children:"width"})," and ",(0,s.jsx)(n.code,{children:"height"}),", but not ",(0,s.jsx)(n.code,{children:"hieght"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Spelling is hard!"})," Let's add the ",(0,s.jsx)(n.code,{children:"dataclass"})," decorator to our class definition. This will generate a constructor for us, and also add a few other useful methods."]}),"\n",(0,s.jsx)(l.A,{sampleFilename:"misspelled.py",codeSample:"#Pyrefly will catch this spelling error before you run the code\nfrom dataclasses import dataclass\n\n@dataclass\nclass Rectangle:\n  width: int\n  height: int\n\nrect = Rectangle(width=100, height=50)\n\narea = rect.width * rect.hieght\n"}),"\n",(0,s.jsx)(n.p,{children:"In this dataclass example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"@dataclass"})," decorator automatically generates methods like ",(0,s.jsx)(n.code,{children:"__init__"}),", ",(0,s.jsx)(n.code,{children:"__repr__"}),", and ",(0,s.jsx)(n.code,{children:"__eq__"})," based on the class attributes."]}),"\n",(0,s.jsxs)(n.li,{children:["Type hints are used to define the class attributes (",(0,s.jsx)(n.code,{children:"width: int"}),", ",(0,s.jsx)(n.code,{children:"height: int"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["The same spelling error exists (",(0,s.jsx)(n.code,{children:"rect.hieght"}),"), but tools like Pyrefly can catch this before runtime because the dataclass clearly defines which attributes exist."]}),"\n",(0,s.jsx)(n.li,{children:"This demonstrates how type hints combined with dataclasses provide both convenience and better error detection."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"4-primitive-types",children:"4. Primitive Types"}),"\n",(0,s.jsxs)(n.p,{children:["Since Python 3.9 you can use all the ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/library/stdtypes.html",children:"primitive types"})," directly as annotations."]}),"\n",(0,s.jsx)(l.A,{sampleFilename:"primitives_types.py",codeSample:'age: int = 30\nheight: float = 1.85\nname: str = "Tyler Typer"\nis_admin: bool = False\n'}),"\n",(0,s.jsx)(n.p,{children:"In this primitive types example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Each variable is annotated with its expected type (",(0,s.jsx)(n.code,{children:"int"}),", ",(0,s.jsx)(n.code,{children:"float"}),", ",(0,s.jsx)(n.code,{children:"str"}),", ",(0,s.jsx)(n.code,{children:"bool"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"The values assigned match their declared types."}),"\n",(0,s.jsx)(n.li,{children:"These annotations help document the code and allow type checkers to verify that operations on these variables are valid for their types."}),"\n",(0,s.jsxs)(n.li,{children:["For example, a type checker would flag an error if you tried ",(0,s.jsx)(n.code,{children:"age + name"})," since adding an integer and string isn't a valid operation."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You can also specify a parameter as optional by using ",(0,s.jsx)(n.code,{children:"Optional"})," type, or now with the ",(0,s.jsx)(n.code,{children:"| None"})," syntax."]}),"\n",(0,s.jsx)(l.A,{sampleFilename:"primitive2_types.py",codeSample:"# Optional typing example\n\nfrom typing import Optional\n\nmiddle_name: Optional[str] = None        # classic\nnickname: str | None = None              # 3.10+ shorthand\n"}),"\n",(0,s.jsx)(n.p,{children:"In this Optional type example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Both variables can either be a string or ",(0,s.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Optional[str]"})," is the traditional syntax (pre-Python 3.10)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"str | None"})," is the newer union syntax introduced in Python 3.10."]}),"\n",(0,s.jsxs)(n.li,{children:["These annotations tell type checkers that the variable might be ",(0,s.jsx)(n.code,{children:"None"}),", so they can warn you if you try to perform string operations without checking for ",(0,s.jsx)(n.code,{children:"None"})," first."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"5-collections",children:"5. Collections"}),"\n",(0,s.jsx)(n.h3,{id:"syntaxexamples",children:"Syntax\tExamples"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["List of numbers\t",(0,s.jsx)(n.code,{children:"list[int]\tscores: list[int] = [98, 87, 91]"})]}),"\n",(0,s.jsxs)(n.li,{children:["Tuple of two floats\t",(0,s.jsx)(n.code,{children:"tuple[float, float]\tpoint: tuple[float, float] = (3.0, 4.0)"})]}),"\n",(0,s.jsxs)(n.li,{children:["Dict of str -> int\t",(0,s.jsx)(n.code,{children:'dict[str, int]\tinventory: dict[str, int] = {"apples": 5}'})]}),"\n",(0,s.jsxs)(n.li,{children:["Set of strings\t",(0,s.jsx)(n.code,{children:'set[str]\tauthors: set[str] = {"Bob", "Eve"}'})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Since Python 3.9 you can subscript built\u2011ins directly\u2014no need for ",(0,s.jsx)(n.code,{children:"from typing import List"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"6-functions",children:"6. Functions"}),"\n",(0,s.jsx)(l.A,{sampleFilename:"basic_function_types.py",codeSample:"# Simple function\ndef add(a: int, b: int) -> int:\n  return a + b\n"}),"\n",(0,s.jsx)(n.p,{children:"In this basic function example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Both parameters ",(0,s.jsx)(n.code,{children:"a"})," and ",(0,s.jsx)(n.code,{children:"b"})," are annotated as integers."]}),"\n",(0,s.jsxs)(n.li,{children:["The function is annotated to return an integer (",(0,s.jsx)(n.code,{children:"-> int"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"This tells type checkers that the function should only be called with integers and that the return value should only be used in contexts where an integer is expected."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Default values keep their annotation:"}),"\n",(0,s.jsx)(l.A,{sampleFilename:"default_value_types.py",codeSample:'# Function with default value\n\n\ndef greet(name: str, polite: bool = True) -> str:\n  return "Hello!" if polite else f"Yo {name}"\n  '}),"\n",(0,s.jsx)(n.p,{children:"In this function with default values:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"name"})," parameter must be a string."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"polite"})," parameter is a boolean with a default value of ",(0,s.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"The function returns a string."}),"\n",(0,s.jsxs)(n.li,{children:["Even though ",(0,s.jsx)(n.code,{children:"polite"})," has a default value, it still has a type annotation to ensure that if it's explicitly provided, it must be a boolean."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Variable\u2011length arguments:"}),"\n",(0,s.jsx)(l.A,{sampleFilename:"variable_length_types.py",codeSample:"# Variable length functions\nfrom collections.abc import Callable\n\nLogger = Callable[[str], None]\n\ndef debug(*msgs: str, log: Logger | None) -> None:\n  for m in msgs:\n    if log is not None:\n      log(m)\n    else:\n      print(m)\n"}),"\n",(0,s.jsx)(n.p,{children:"In this variable-length arguments example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Logger"})," is defined as a type alias for a callable that takes a string and returns nothing (",(0,s.jsx)(n.code,{children:"None"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*msgs: str"})," indicates that the function accepts any number of string arguments."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"log: Logger | None"})," means the ",(0,s.jsx)(n.code,{children:"log"})," parameter can be either a Logger function or ",(0,s.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The function is annotated to return ",(0,s.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"This demonstrates how to type complex function signatures with variable arguments and function parameters."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"7-get-type-hint-signals-directly-in-your-editor",children:"7. Get Type Hint Signals Directly in Your Editor"}),"\n",(0,s.jsxs)(n.p,{children:["You can download the ",(0,s.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=meta.pyrefly",children:"Pyrefly extension for VSCode"})," to get type hint signals directly in your IDE."]}),"\n",(0,s.jsxs)(n.p,{children:["Next, install ",(0,s.jsx)(n.a,{href:"../installation/",children:"Pyrefly"})," and check some code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Fast, zero\u2011config\npip install pyrefly\n\npyrefly check ./my_sample.py\n\n# Check whole directories\npyrefly check app/ tests/\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"pyrefly.toml"})," file to configure your project. Instructions ",(0,s.jsx)(n.a,{href:"../configuration",children:"here"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);