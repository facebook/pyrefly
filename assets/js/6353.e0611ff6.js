"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[6353],{26353:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"typing-for-python-developers","title":"Typing for Python Developers","description":"Get to know Python\'s Type System with working examples","source":"@site/docs/typing-for-python-developers.mdx","sourceDirName":".","slug":"/typing-for-python-developers","permalink":"/en/docs/typing-for-python-developers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/typing-for-python-developers.mdx","tags":[],"version":"current","frontMatter":{"title":"Typing for Python Developers","description":"Get to know Python\'s Type System with working examples"},"sidebar":"docsSidebar","previous":{"title":"Introduction","permalink":"/en/docs/"},"next":{"title":"Python Typing 101","permalink":"/en/docs/python-typing-for-beginners"}}');var i=s(74848),r=s(28453),a=s(31888);const l={title:"Typing for Python Developers",description:"Get to know Python's Type System with working examples"},o="Typing for Python Developers",c={},d=[{value:"Types with Inference",id:"types-with-inference",level:3},{value:"Where Inference Shines \u2728",id:"where-inference-shines-",level:3},{value:"When to Add Hints",id:"when-to-add-hints",level:3},{value:"Define Types Inline",id:"define-types-inline",level:2},{value:"The Basics",id:"the-basics",level:3},{value:"Functions",id:"functions",level:3},{value:"Advanced Types",id:"advanced-types",level:2},{value:"Composing Types",id:"composing-types",level:3},{value:"Unions &amp; Optional",id:"unions--optional",level:3},{value:"Generics",id:"generics",level:3},{value:"Variance Inference in Generics",id:"variance-inference-in-generics",level:3},{value:"Structural Types and Protocols",id:"structural-types-and-protocols",level:2},{value:"Dataclasses",id:"dataclasses",level:3},{value:"TypedDict",id:"typeddict",level:3},{value:"Overloads",id:"overloads",level:3},{value:"Protocols",id:"protocols",level:3},{value:"Typing Features and PEPS available in each Python Version",id:"typing-features-and-peps-available-in-each-python-version",level:2},{value:"Key Highlights Summary:",id:"key-highlights-summary",level:3}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"typing-for-python-developers",children:"Typing for Python Developers"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"A 5\u2011Minute Tour with Pyrefly."})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal:"})," In five minutes you'll know how Python's static type system ",(0,i.jsx)(n.em,{children:"infers"}),", ",(0,i.jsx)(n.em,{children:"defines"}),", and ",(0,i.jsx)(n.em,{children:"composes"})," types\u2014and you'll have copy\u2011paste snippets to start using right away."]}),"\n",(0,i.jsxs)(n.p,{children:["If you are new to Python typing, check out our ",(0,i.jsx)(n.a,{href:"../python-typing-for-beginners/",children:"Python Typing 101 guide"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Python's type system allows you to annotate variables so you, your teammates and your type checker can find bugs before you run your code. Think of it as documentation that's automatically validated and will help your IDE help you."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"TL;DR"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Catch bugs ",(0,i.jsx)(n.strong,{children:"before"})," running the code."]}),"\n",(0,i.jsx)(n.li,{children:"Improve editor autocomplete & refactors."}),"\n",(0,i.jsx)(n.li,{children:"Turn your code into living documentation."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"types-with-inference",children:"Types with Inference"}),"\n",(0,i.jsxs)(n.p,{children:["Static analyzers can often ",(0,i.jsx)(n.em,{children:"infer"})," types from your code\u2014no annotations required. Pyrefly takes this a step further."]}),"\n",(0,i.jsx)(a.A,{sampleFilename:"basic_inference.py",codeSample:'# Basic Inference\nanswer = 42\nreveal_type(answer) # hover to reveal type\n\nfruits = ["apple", "banana", "cherry"]\nscores = {"math": 95, "science": 90}\n\ndef greet(name):\n  return f"Hello, {name}!"\n\nmessage = greet("World")\n'}),"\n",(0,i.jsx)(n.h3,{id:"where-inference-shines-",children:"Where Inference Shines \u2728"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Constant assignments (",(0,i.jsx)(n.code,{children:"answer = 42 -> int"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["List/tuple/dict literals with uniform elements (",(0,i.jsx)(n.code,{children:'names = ["A", "B"] -> list[str]'}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Return types if parameter types are annotated:"}),"\n"]}),"\n",(0,i.jsx)(a.A,{sampleFilename:"return_inference.py",codeSample:"def add(a: int, b: int):   # \u2705 param annotations\n  return a + b    # \ud83d\udd0d return inferred -> int\n"}),"\n",(0,i.jsx)(n.h3,{id:"when-to-add-hints",children:"When to Add Hints"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Public APIs (library or service boundaries)"}),"\n",(0,i.jsxs)(n.li,{children:["Mixed collections (",(0,i.jsx)(n.code,{children:"list[int | str]"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Callable signatures (decorators, callbacks)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"define-types-inline",children:"Define Types Inline"}),"\n",(0,i.jsx)(n.h3,{id:"the-basics",children:"The Basics"}),"\n",(0,i.jsx)(n.p,{children:"Python's built-in types can be used to write many type hints."}),"\n",(0,i.jsx)(a.A,{sampleFilename:"built_in_types.py",codeSample:'# Example: Basic Types\n\nfrom typing import reveal_type\n\nage: int = 5\nreveal_type(age) # revealed type: int\n\nage = "oops"\n\nname: str = "John"\nreveal_type(name) # revealed type: str\n\nnumbers: list[int] = [1, 2, 3]\nreveal_type(numbers) # revealed type: list[int]\n\nnames: list[str] = ["John", "Jane"]\nreveal_type(names) # revealed type: list[str]\n\nperson: dict[str, str] = {"name": "John", "age": "30"}\nreveal_type(person) # revealed type: dict[str, str]\n\nis_admin = True\nreveal_type(is_admin) # revealed type: Literal[True]\n'}),"\n",(0,i.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.p,{children:"Defining the parameter and return types for a function doesn't just help prevent bugs, but it makes it easier to navigate in other files. You don't always need to define a return type - we'll do our best to infer it for you! We can't always get it right and an explicit return type will help your IDE navigate faster and more accurately."}),"\n",(0,i.jsx)(a.A,{sampleFilename:"functions_types.py",codeSample:'# Example: Functions\n\nfrom typing import reveal_type\n\ndef greet(name: str) -> str:\n  return f"Hello, {name}!"\n\ngreet("Pyrefly")\n\ndef whatDoesThisFunctionReturnAgain(a: int, b: int):\n  return a + b\n\nreveal_type(whatDoesThisFunctionReturnAgain(2, 3)) # revealed type: int\n'}),"\n",(0,i.jsx)(n.h2,{id:"advanced-types",children:"Advanced Types"}),"\n",(0,i.jsx)(n.h3,{id:"composing-types",children:"Composing Types"}),"\n",(0,i.jsx)(n.p,{children:"The real power comes from composing smaller pieces into richer shapes."}),"\n",(0,i.jsx)(n.h3,{id:"unions--optional",children:"Unions & Optional"}),"\n",(0,i.jsx)(a.A,{sampleFilename:"unions_types.py",codeSample:"# Union and Optional Types\n\nfrom typing import Optional\n\ndef to_int(data: str | bytes | None) -> Optional[int]:\n  if data is None:\n      return None\n  if isinstance(data, bytes):\n      data = data.decode()\n  return int(data)\n"}),"\n",(0,i.jsx)(n.h3,{id:"generics",children:"Generics"}),"\n",(0,i.jsx)(n.p,{children:"Generics allow you to define reusable functions and classes that work with multiple types. This feature enables you to write more flexible and adaptable code."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Declaring Generic Classes:"})}),"\n",(0,i.jsx)(a.A,{sampleFilename:"generics.py",codeSample:"# Example: Generic Classes\n\nfrom typing import reveal_type\n\nclass C[T]:\n  def __init__(self, x: T):\n      self.x = x\n  def box(self) -> list[T]:\n      return [self.x]\n\nc = C(0)\nreveal_type(c.box())  # revealed type: list[int]\n"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Declaring Type Statements:"})}),"\n",(0,i.jsx)(a.A,{sampleFilename:"type_statements.py",codeSample:"# Example: Type Statements\ntype ListOrSet[T:int] = list[T] | set[T]\n"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"ParamSpec and TypeVarTuple:"})}),"\n",(0,i.jsx)(a.A,{sampleFilename:"param_spec_typevar_tuple.py",codeSample:"# Example: ParamSpec and TypeVarTuple\nclass ChildClass[T, *Ts, **P]: ...\n"}),"\n",(0,i.jsx)(n.h3,{id:"variance-inference-in-generics",children:"Variance Inference in Generics"}),"\n",(0,i.jsxs)(n.p,{children:["When working with generics, a key question is: if one type is a subtype of another, does the subtyping relationship carry over to generic types?\nFor example, if ",(0,i.jsx)(n.code,{children:"int"})," is a subtype of ",(0,i.jsx)(n.code,{children:"float"}),", is ",(0,i.jsx)(n.code,{children:"A[int]"})," also a subtype of ",(0,i.jsx)(n.code,{children:"A[float]"}),"?"]}),"\n",(0,i.jsx)(n.p,{children:"This behavior is governed by variance:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Covariant types preserve the direction of subtyping (",(0,i.jsx)(n.code,{children:"A[int]"})," is a subtype of ",(0,i.jsx)(n.code,{children:"A[float]"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Contravariant types reverse it."}),"\n",(0,i.jsx)(n.li,{children:"Invariant types require an exact match."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Before ",(0,i.jsx)(n.a,{href:"https://peps.python.org/pep-0695/",children:"PEP 695"}),", variance had to be declared manually and was often confusing.\nPyrefly infers the variance automatically based on how each type parameter is used - in method arguments, return values, attributes, and base classes."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1:"})," Covariance from Immutable Attributes (",(0,i.jsx)(n.code,{children:"Final"}),")"]}),"\n",(0,i.jsx)(a.A,{sampleFilename:"variance1.py",codeSample:"# Example 1: Variance Inference\n\nfrom typing import Final\n\nclass ShouldBeCovariant[T]:\n  x: Final[T]\n\n  def __init__(self, value: T):\n      self.x = value\n\n\nx1: ShouldBeCovariant[float] = ShouldBeCovariant[int](1)   # OK\nx2: ShouldBeCovariant[int] = ShouldBeCovariant[float](1.0)  # ERROR!\n"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How Variance is Inferred:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The attribute ",(0,i.jsx)(n.code,{children:"x"})," is annotated as ",(0,i.jsx)(n.code,{children:"Final[T]"}),", making it immutable after initialization."]}),"\n",(0,i.jsxs)(n.li,{children:["Because ",(0,i.jsx)(n.code,{children:"T"})," appears only in this read-only position, it is safe to infer ",(0,i.jsx)(n.code,{children:"T"})," as covariant."]}),"\n",(0,i.jsxs)(n.li,{children:["This means:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["You can assign ",(0,i.jsx)(n.code,{children:"ShouldBeCovariant[int]"})," to a variable expecting ",(0,i.jsx)(n.code,{children:"ShouldBeCovariant[float]"})," (since ",(0,i.jsx)(n.code,{children:"int"})," is a subtype of ",(0,i.jsx)(n.code,{children:"float"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["But the reverse is not allowed (",(0,i.jsx)(n.code,{children:"ShouldBeCovariant[float]"})," to ",(0,i.jsx)(n.code,{children:"ShouldBeCovariant[int]"}),"), which triggers a type error."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2:"})," General Variance Inference from Method and Base Class Usage"]}),"\n",(0,i.jsx)(a.A,{sampleFilename:"variance2.py",codeSample:"# Example 2: Variance Inference\n\nclass ClassA[T1, T2, T3](list[T1]):\n  def method1(self, a: T2) -> None:\n      ...\n\n  def method2(self) -> T3:\n      ...\n\ndef func_a(p1: ClassA[float, int, int], p2: ClassA[int, float, float]):\n  v1: ClassA[int, int, int] = p1  # ERROR!\n  v2: ClassA[float, float, int] = p1  # ERROR!\n  v3: ClassA[float, int, float] = p1  # OK\n\n  v4: ClassA[int, int, int] = p2  # ERROR!\n  v5: ClassA[int, int, float] = p2  # OK\n"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How Variance is Inferred:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"T1"})," appears in the base class ",(0,i.jsx)(n.code,{children:"list[T1]"}),". Since list is mutable, ",(0,i.jsx)(n.code,{children:"T1"})," is invariant."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"T2"})," is used as the type of a method parameter (",(0,i.jsx)(n.code,{children:"a: T2"}),") so ",(0,i.jsx)(n.code,{children:"T2"})," contravariant."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"T3"})," is the return type of a method (",(0,i.jsx)(n.code,{children:"def method2() -> T3"}),") so ",(0,i.jsx)(n.code,{children:"T3"})," is covariant."]}),"\n",(0,i.jsxs)(n.li,{children:["This means:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"v1"})," fails due to mismatched ",(0,i.jsx)(n.code,{children:"T1"})," (invariant)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"v2"})," fails because ",(0,i.jsx)(n.code,{children:"T2"})," expects a supertype, but gets a subtype."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"v4"})," fails because ",(0,i.jsx)(n.code,{children:"T3"})," expects a subtype, but gets a supertype."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"structural-types-and-protocols",children:"Structural Types and Protocols"}),"\n",(0,i.jsx)(n.p,{children:'Python also employs a structural type system, often referred to as "duck typing." This concept is based on the idea that if two objects have the same shape or attributes, they can be treated as being of the same type.'}),"\n",(0,i.jsx)(n.h3,{id:"dataclasses",children:"Dataclasses"}),"\n",(0,i.jsx)(n.p,{children:"Dataclasses allow you to create type-safe data structures while minimizing boilerplate."}),"\n",(0,i.jsx)(a.A,{sampleFilename:"data_classes.py",codeSample:'# Example: Dataclasses\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n  x: float\n  y: float\n\nPoint(x=0.0, y=0.0)    # OK\nPoint(x=0.0, y="oops") # ERROR!\n'}),"\n",(0,i.jsx)(n.h3,{id:"typeddict",children:"TypedDict"}),"\n",(0,i.jsx)(n.p,{children:"Typed dictionaries enable you to define dictionaries with specific key-value types. This feature lets you bring type safety to ad-hoc dictionary structures without major refactoring."}),"\n",(0,i.jsx)(a.A,{sampleFilename:"typed_dict.py",codeSample:'# Example: TypedDict\n\nfrom typing import TypedDict\n\nclass Movie(TypedDict):\n  name: str\n  year: int\n\ngood_movie: Movie = {"name": "Toy Story", "year": 1995} # OK\nbad_movie: Movie = {"name": "The Room", "year": "2003"}  # ERROR!\n'}),"\n",(0,i.jsx)(n.h3,{id:"overloads",children:"Overloads"}),"\n",(0,i.jsx)(n.p,{children:"Overloads allow you to define multiple function signatures for a single function. Like generics, this feature helps you write more flexible and adaptable code."}),"\n",(0,i.jsx)(a.A,{sampleFilename:"overloads.py",codeSample:'# Example: Overloads\n\nfrom typing import overload, reveal_type\n\n@overload\ndef f(x: int) -> int: ...\n\n@overload\ndef f(x: str) -> str: ...\n\ndef f(x: int | str) -> int | str:\n  return x\n\nreveal_type(f(0))  # revealed type: int\nreveal_type(f("")) # revealed type: str\n'}),"\n",(0,i.jsx)(n.h3,{id:"protocols",children:"Protocols"}),"\n",(0,i.jsx)(n.p,{children:"Protocols allows you to define interfaces without explicit inheritance. This feature helps you write more modular and composable code."}),"\n",(0,i.jsx)(a.A,{sampleFilename:"protocols.py",codeSample:'# Example: Structural Typing with Protocols\n\nfrom typing import Iterable, Protocol\n\nclass Writer(Protocol):\n  def write(self) -> None: ...\n\nclass GoodWorld:\n  def write(self) -> None:\n      print("Hello world!")\n\nclass BadWorld:\n  pass\n\ndef f(writer: Writer):\n  pass\n\nf(GoodWorld()) # OK\nf(BadWorld())  # ERROR!\n'}),"\n",(0,i.jsx)(n.h2,{id:"typing-features-and-peps-available-in-each-python-version",children:"Typing Features and PEPS available in each Python Version"}),"\n",(0,i.jsxs)(n.p,{children:["See the full list of features available in the Python type system ",(0,i.jsx)(n.a,{href:"../python-features-and-peps",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"key-highlights-summary",children:"Key Highlights Summary:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inference:"})," Python's static analyzers can infer types from your code, reducing the need for explicit annotations. This feature enhances code readability and helps catch bugs early."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Defining Types:"})," You can define types inline using Python's built-in types, which aids in documentation and improves IDE support."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Advanced Types:"})," The guide covers advanced concepts like composing types, using unions and optionals, generics, protocols, and structural types like dataclasses and TypedDict."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Practical Examples:"})," The guide includes examples of functions, generic classes, structural typing with protocols, and more, demonstrating how to apply these concepts in real-world scenarios."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},31888:(e,n,s)=>{s.d(n,{A:()=>l});var t=s(35363),i=s(96540),r=(s(32855),s(74848));const a=i.lazy((()=>Promise.all([s.e(1869),s.e(8285),s.e(5572)]).then(s.bind(s,5572))));function l(e){let{sampleFilename:n,codeSample:s=""}=e;if(null==n)throw"Missing sampleFilename. IDE services won't work properly.";const[l,o]=i.useState(!1),[c,d]=i.useState(!1),p=i.useRef(null);return i.useEffect((()=>{if("undefined"==typeof window)return;if(!p.current)return;const e=new IntersectionObserver((e=>{const n=e[0];o(n.isIntersecting),n.isIntersecting&&d(!0)}),{rootMargin:"500px 0px",threshold:.1});return e.observe(p.current),()=>e.disconnect()}),[]),(0,r.jsxs)("div",{ref:p,className:"x1717udv x1ghz6dp",children:[!c&&(0,r.jsx)("div",{className:"xh8yej3 x5yr21d x126k92a xysyzu8 x1tamke2 x1ybsatz x1sp1r08",children:(0,r.jsx)("div",{className:"xb3r6kr x1n2onr6 xif65rj x1iwq0vh",children:s})}),c&&(0,r.jsx)("pre",{className:"xqid1ag x1rea2x4 x1n2onr6 x7ywyr2",children:(0,r.jsx)(t.A,{children:()=>(0,r.jsx)(i.Suspense,{fallback:(0,r.jsx)("div",{children:"Loading..."}),children:(0,r.jsx)(a,{sampleFilename:n,isCodeSnippet:!0,codeSample:s,isInViewport:l})})})})]})}},32855:(e,n,s)=>{s.d(n,{xk:()=>o});var t,i={};var r=function(){if(t)return i;t=1,Object.defineProperty(i,"__esModule",{value:!0}),i.styleq=void 0;var e=new WeakMap;function n(n){var s,t,i;return null!=n&&(s=!0===n.disableCache,t=!0===n.disableMix,i=n.transform),function(){for(var n=[],r="",a=null,l="",o=s?null:e,c=new Array(arguments.length),d=0;d<arguments.length;d++)c[d]=arguments[d];for(;c.length>0;){var p=c.pop();if(null!=p&&!1!==p)if(Array.isArray(p))for(var h=0;h<p.length;h++)c.push(p[h]);else{var u=null!=i?i(p):p;if(null!=u.$$css){var y="";if(null!=o&&o.has(u)){var f=o.get(u);null!=f&&(y=f[0],l=f[2],n.push.apply(n,f[1]),o=f[3])}else{var m=[];for(var x in u){var v=u[x];if("$$css"!==x)"string"==typeof v||null===v?n.includes(x)||(n.push(x),null!=o&&m.push(x),"string"==typeof v&&(y+=y?" "+v:v)):console.error("styleq: ".concat(x," typeof ").concat(String(v),' is not "string" or "null".'));else{var j=u[x];!0!==j&&(l=l?j+"; "+l:j)}}if(null!=o){var g=new WeakMap;o.set(u,[y,m,l,g]),o=g}}y&&(r=r?y+" "+r:y)}else if(t)null==a&&(a={}),a=Object.assign({},u,a);else{var b=null;for(var w in u){var T=u[w];void 0!==T&&(n.includes(w)||(null!=T&&(null==a&&(a={}),null==b&&(b={}),b[w]=T),n.push(w),o=null))}null!=b&&(a=Object.assign(b,a))}}}return[r,a,l]}}return(i.styleq=n()).factory=n,i}();const a=e=>new Error(`Unexpected 'stylex.${e}' call at runtime. Styles must be compiled by '@stylexjs/babel-plugin'.`),l=e=>a(`types.${e}`);function o(){for(var e=arguments.length,n=new Array(e),s=0;s<e;s++)n[s]=arguments[s];const[t,i,a]=r.styleq(n),l={};return null!=t&&""!==t&&(l.className=t),null!=i&&Object.keys(i).length>0&&(l.style=i),null!=a&&""!==a&&(l["data-style-src"]=a),l}const c={angle:e=>{throw l("angle")},color:e=>{throw l("color")},url:e=>{throw l("url")},image:e=>{throw l("image")},integer:e=>{throw l("integer")},lengthPercentage:e=>{throw l("lengthPercentage")},length:e=>{throw l("length")},percentage:e=>{throw l("percentage")},number:e=>{throw l("number")},resolution:e=>{throw l("resolution")},time:e=>{throw l("time")},transformFunction:e=>{throw l("transformFunction")},transformList:e=>{throw l("transformList")}};function d(){for(var e=arguments.length,n=new Array(e),s=0;s<e;s++)n[s]=arguments[s];const[t]=r.styleq(n);return t}d.attrs=function(){const{className:e,"data-style-src":n,style:s}=o(...arguments),t={};return null!=e&&""!==e&&(t.class=e),null!=s&&Object.keys(s).length>0&&(t.style=Object.keys(s).map((e=>`${e}:${s[e]};`)).join("")),null!=n&&""!==n&&(t["data-style-src"]=n),t},d.create=function(e){throw a("create")},d.createTheme=(e,n)=>{throw a("createTheme")},d.defineVars=function(e){throw a("defineVars")},d.firstThatWorks=function(){throw a("firstThatWorks")},d.keyframes=e=>{throw a("keyframes")},d.props=o,d.types=c},35363:(e,n,s)=>{s.d(n,{A:()=>r});s(96540);var t=s(9136),i=s(74848);function r(e){let{children:n,fallback:s}=e;return(0,t.default)()?(0,i.jsx)(i.Fragment,{children:n?.()}):s??null}}}]);