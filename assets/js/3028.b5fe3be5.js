"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[3028],{83028:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"configuration","title":"Configuration","description":"Configure Pyrefly settings and options","source":"@site/docs/configuration.mdx","sourceDirName":".","slug":"/configuration","permalink":"/en/docs/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/configuration.mdx","tags":[],"version":"current","frontMatter":{"title":"Configuration","slug":"/configuration","description":"Configure Pyrefly settings and options"},"sidebar":"docsSidebar","previous":{"title":"Installation","permalink":"/en/docs/installation"},"next":{"title":"Migration Guides","permalink":"/en/docs/migrating-to-pyrefly"}}');var o=i(74848),s=i(28453);const t={title:"Configuration",slug:"/configuration",description:"Configure Pyrefly settings and options"},l="Pyrefly Configuration",c={},d=[{value:"Simple Configuration Example",id:"simple-configuration-example",level:2},{value:"Precedence in Options",id:"precedence-in-options",level:2},{value:"Type Checking Modes",id:"type-checking-modes",level:2},{value:"Configuration Finding",id:"configuration-finding",level:2},{value:"Providing a Config in Single-File Mode",id:"providing-a-config-in-single-file-mode",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"<code>project-includes</code>",id:"project-includes",level:3},{value:"<code>project-excludes</code>",id:"project-excludes",level:3},{value:"<code>search-path</code>",id:"search-path",level:3},{value:"<code>disable-search-path-heuristics</code>",id:"disable-search-path-heuristics",level:3},{value:"<strong>Search Path Heuristics</strong>",id:"search-path-heuristics",level:4},{value:"<code>site-package-path</code>",id:"site-package-path",level:3},{value:"<code>python-platform</code>",id:"python-platform",level:3},{value:"<code>python-version</code>",id:"python-version",level:3},{value:"<code>conda-environment</code>",id:"conda-environment",level:3},{value:"<code>python-interpreter</code>",id:"python-interpreter",level:3},{value:"<code>skip-interpreter-query</code>",id:"skip-interpreter-query",level:3},{value:"<code>typeshed-path</code>",id:"typeshed-path",level:3},{value:"<code>errors</code>",id:"errors",level:3},{value:"<code>disable-type-errors-in-ide</code>",id:"disable-type-errors-in-ide",level:3},{value:"<code>replace-imports-with-any</code>",id:"replace-imports-with-any",level:3},{value:"<code>ignore-missing-imports</code>",id:"ignore-missing-imports",level:3},{value:"<code>ignore-errors-in-generated-code</code>",id:"ignore-errors-in-generated-code",level:3},{value:"<code>ignore-missing-source</code>",id:"ignore-missing-source",level:3},{value:"<code>infer-with-first-use</code>",id:"infer-with-first-use",level:3},{value:"<code>untyped-def-behavior</code>",id:"untyped-def-behavior",level:3},{value:"<code>use-ignore-files</code>",id:"use-ignore-files",level:3},{value:"<code>permissive-ignores</code>",id:"permissive-ignores",level:3},{value:"<code>sub-config</code>",id:"sub-config",level:3},{value:"Configuration Details",id:"configuration-details",level:2},{value:"Environment Autoconfiguration",id:"environment-autoconfiguration",level:3},{value:"Filesystem Globbing",id:"filesystem-globbing",level:3},{value:"Module Globbing",id:"module-globbing",level:3},{value:"<code>Sub-Configs</code>",id:"sub-configs",level:3},{value:"<strong>SubConfig Allowed Overrides</strong>",id:"subconfig-allowed-overrides",level:4},{value:"<strong>SubConfig Table Structure</strong>",id:"subconfig-table-structure",level:4},{value:"<strong>SubConfig Option Selection</strong>",id:"subconfig-option-selection",level:4},{value:"<strong>SubConfig Example</strong>",id:"subconfig-example",level:4},{value:"Conda and Venv Support",id:"conda-and-venv-support",level:3},{value:"Venv",id:"venv",level:3},{value:"Conda",id:"conda",level:3},{value:"Example Configurations",id:"example-configurations",level:2},{value:"Default <code>pyrefly.toml</code>",id:"default-pyreflytoml",level:3},{value:"Example <code>pyrefly.toml</code>",id:"example-pyreflytoml",level:3},{value:"Example <code>pyproject.toml</code>",id:"example-pyprojecttoml",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"pyrefly-configuration",children:"Pyrefly Configuration"})}),"\n",(0,o.jsx)(n.p,{children:"Pyrefly has a basic configuration that can (or will) allow you to customize your\nPyrefly runs without having to specify all of your arguments on the command\nline."}),"\n",(0,o.jsx)(n.p,{children:"NOTE: this is early in its development, so the options listed here are subject\nto change in name, usage, type, quantity, and structure."}),"\n",(0,o.jsxs)(n.p,{children:["Configurations can be specified in a ",(0,o.jsx)(n.a,{href:"https://toml.io/en/",children:"TOML file"})," at the root of\nyour project (or elsewhere, as long as the path-based config options point to the right place) named\n",(0,o.jsx)(n.code,{children:"pyrefly.toml"}),", with all configuration options in the top-level of the document.\nYou can also specify a configuration in a ",(0,o.jsx)(n.code,{children:"pyproject.toml"})," under a ",(0,o.jsx)(n.code,{children:"[tool.pyrefly]"}),"\nsection. Other config names can be used when explicitly passing in the config file\nname with the ",(0,o.jsx)(n.code,{children:"--config"}),"/",(0,o.jsx)(n.code,{children:"-c"})," flag, but they will not be automatically found by\n",(0,o.jsx)(n.a,{href:"#configuration-finding",children:"Configuration Finding"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Both absolute and config-relative paths are supported."}),"\n",(0,o.jsx)(n.h2,{id:"simple-configuration-example",children:"Simple Configuration Example"}),"\n",(0,o.jsxs)(n.p,{children:["Here's an example of a simple config. To see more complex examples,\nincluding in a ",(0,o.jsx)(n.code,{children:"pyproject.toml"}),", look at\n",(0,o.jsx)(n.a,{href:"#example-configurations",children:"Example Configurations"}),", which show Pyrefly's default\nconfig, as well as other ways you can set your configuration."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'# set the directory Pyrefly will search for files to type check\nproject-includes = [\n    "a", "b/c/d", "e"\n]\n\n# manually set the `sys.platform` Pyrefly will assume when type checking\npython-platform = "linux"\n\n# return an import error when `<library>-stubs` can be imported, but no\n# non-stubs version of that library can be found\nignore-missing-source = false\n\n# a table mapping error codes to an `is-enabled` boolean\n[errors]\n# disable `bad-assignment` errors\nbad-assignment = false\n# disable `bad-return` errors\nbad-return = false\n'})}),"\n",(0,o.jsx)(n.h2,{id:"precedence-in-options",children:"Precedence in Options"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"#configuration-options",children:"Configuration options"})," are selected in the following order"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["CLI flags","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Examples: ",(0,o.jsx)(n.code,{children:"--project-excludes <value>"}),", ",(0,o.jsx)(n.code,{children:"--python-version <value>"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Configuration options","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Examples: (in a ",(0,o.jsx)(n.code,{children:"pyrefly.toml"}),") ",(0,o.jsx)(n.code,{children:"project-excludes = <value>"}),", ",(0,o.jsx)(n.code,{children:"python-version = <value>"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Pyrefly defaults","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["See ",(0,o.jsxs)(n.a,{href:"#default-pyreflytoml",children:["Default ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})]})," for the default values used"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"type-checking-modes",children:"Type Checking Modes"}),"\n",(0,o.jsx)(n.p,{children:"Pyrefly has two different modes it can run in when type checking your project, which\ncorrespond to different but useful ways we expect most people to interact with Pyrefly:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Project"})," mode: attempt to load a config, falling back to Pyrefly's default config when\nnone can be found, and type check using that one config. This involves getting the\n",(0,o.jsx)(n.a,{href:"#project-includes",children:(0,o.jsx)(n.code,{children:"project-includes"})})," and ",(0,o.jsx)(n.a,{href:"#project-excludes",children:(0,o.jsx)(n.code,{children:"project-excludes"})})," from the file, expanding the patterns,\nand type checking on those files.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Project mode is used whenever no files are provided with the CLI invocation."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Per-file"})," or ",(0,o.jsx)(n.strong,{children:"Single-file"})," mode: when given ",(0,o.jsx)(n.a,{href:"#project-includes",children:(0,o.jsx)(n.code,{children:"FILES..."})})," (and optionally ",(0,o.jsx)(n.a,{href:"#project-excludes",children:(0,o.jsx)(n.code,{children:"--project-excludes"})}),")\nduring a CLI invocation, expand the patterns and find the relevant config file for each\nfile listed. ",(0,o.jsx)(n.code,{children:"project-includes"})," and ",(0,o.jsx)(n.code,{children:"project-excludes"})," are ignored from the config file,\nbut it is used for all remaining config options."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-finding",children:"Configuration Finding"}),"\n",(0,o.jsxs)(n.p,{children:["In both project checking mode and single-file checking mode (see ",(0,o.jsx)(n.a,{href:"#type-checking-modes",children:"Type Checking Modes"}),"\nfor more info), we attempt to find a ",(0,o.jsx)(n.em,{children:"project root"})," from which to check each file, both for reading\nconfig options and for import resolution. The project root is typically the directory containing the\nconfiguration file. More precisely:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["If a configuration file is provided with ",(0,o.jsx)(n.code,{children:"-c"}),"/",(0,o.jsx)(n.code,{children:"--config"}),", we use the directory the file is located in as the directory to check."]}),"\n",(0,o.jsxs)(n.li,{children:["If no configuration file is passed, we perform an upward file search from the 'start location' to the filesystem root,\nlooking in each directory for any of the following files: ",(0,o.jsx)(n.code,{children:"pyrefly.toml"}),", ",(0,o.jsx)(n.code,{children:"pyproject.toml"}),",\n",(0,o.jsx)(n.code,{children:"setup.py"}),", ",(0,o.jsx)(n.code,{children:"mypy.ini"}),", and ",(0,o.jsx)(n.code,{children:"pyrightconfig.json"}),". If we find one, we use the directory it's found in as the containing directory."]}),"\n",(0,o.jsxs)(n.li,{children:["If no configuration file is found, we will still attempt to resolve imports by walking up the tree looking for a matching import. For example: when\nimporting ",(0,o.jsx)(n.code,{children:"from a.b.c import q"}),", if our project structure\nlooks like ",(0,o.jsx)(n.code,{children:"/x/y/z/a/b/c"}),", we can walk up the components of ",(0,o.jsx)(n.code,{children:"a.b.c"})," to find a root at\n",(0,o.jsx)(n.code,{children:"/x/y/z"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Note that only ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})," and ",(0,o.jsx)(n.code,{children:"pyproject.toml"})," are parsed for config options, but we look for\nadditional files that mark the root of a project to aid import resolution."]}),"\n",(0,o.jsx)(n.p,{children:"For project checking mode, the 'start location' is current working directory. For single-file checking mode,\nthe start location is the directory containing each file to be type checked, and\nwe find the config for each file matched by the pattern provided."}),"\n",(0,o.jsxs)(n.p,{children:["If a ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})," is found, it is parsed and used for type checking, and will\nreturn an error to the user on invalid types, syntax, values, or unknown config options."]}),"\n",(0,o.jsxs)(n.p,{children:["If a ",(0,o.jsx)(n.code,{children:"pyproject.toml"})," is found, Pyrefly will use the ",(0,o.jsx)(n.code,{children:"[tool.pyrefly]"}),"\nsection if it exists, otherwise it will assume a default config.\nThe same errors will be returned as when loading a ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})," if\nthe config is invalid."]}),"\n",(0,o.jsx)(n.h3,{id:"providing-a-config-in-single-file-mode",children:"Providing a Config in Single-File Mode"}),"\n",(0,o.jsxs)(n.p,{children:["Providing ",(0,o.jsx)(n.code,{children:"-c"}),"/",(0,o.jsx)(n.code,{children:"--config"})," in single-file checking mode disables the upward file search for config\nfiles. All options are read from the provided config file except ",(0,o.jsx)(n.code,{children:"project-includes"})," and\n",(0,o.jsx)(n.code,{children:"project-excludes"}),", which are ignored."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,o.jsxs)(n.p,{children:["The following section lists all recognized options that can be specified in a config\nfile or ",(0,o.jsx)(n.code,{children:"pyproject.toml"})," Pyrefly config section."]}),"\n",(0,o.jsx)(n.h3,{id:"project-includes",children:(0,o.jsx)(n.code,{children:"project-includes"})}),"\n",(0,o.jsx)(n.p,{children:"The glob patterns used to describe which files to type\ncheck, typically understood as user-space files."}),"\n",(0,o.jsxs)(n.p,{children:["This does not specify\n",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution",children:"Import Resolution"})," priority or the path an\nimport should be resolved from. See ",(0,o.jsx)(n.a,{href:"#search-path",children:(0,o.jsx)(n.code,{children:"search-path"})})," instead."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: list of ",(0,o.jsx)(n.a,{href:"#filesystem-globbing",children:"filesystem glob patterns"})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:'["**/*"]'})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"FILES..."})," argument"]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"include"})," in Pyright, ",(0,o.jsx)(n.code,{children:"files"}),"/",(0,o.jsx)(n.code,{children:"modules"}),"/",(0,o.jsx)(n.code,{children:"packages"})," in\nmypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["When overridden by passing in ",(0,o.jsx)(n.code,{children:"FILES..."}),", we do not consult the\nrelevant config file for what to use for ",(0,o.jsx)(n.code,{children:"project-excludes"}),".\nIf ",(0,o.jsx)(n.code,{children:"project-excludes"})," should not use the default value, override it with the flag as\nwell. This is because\nif multiple configs are loaded that conflict with ",(0,o.jsx)(n.code,{children:"project-includes"}),", determining\nhow to resolve checkable files gets complicated, and might become confusing to\nanyone attempting a type check if they're unaware of all the configs that will be\nused in the type check. Also, we get into a chicken-and-egg problem, where we\ndon't know which files to exclude until we load all the configs we'll need,\nwhich requires loading all files, and imposes a large performance burden."]}),"\n",(0,o.jsxs)(n.li,{children:["When a ",(0,o.jsx)(n.code,{children:"project-includes"})," pattern does not match any files, we will return\nan error."]}),"\n",(0,o.jsx)(n.li,{children:"If you get an error about no matches for a directory when passing a glob as a CLI\nargument, try wrapping the glob in quotes to prevent eager shell glob expansion."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"project-excludes",children:(0,o.jsx)(n.code,{children:"project-excludes"})}),"\n",(0,o.jsxs)(n.p,{children:["The glob patterns used to describe which files to avoid\ntype checking as way to filter files that match ",(0,o.jsx)(n.code,{children:"project-includes"}),",\nbut we don't want to type check."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: list of ",(0,o.jsx)(n.a,{href:"#filesystem-globbing",children:"filesystem glob patterns"})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:'["**/node_modules", "**/__pycache__", "**/*venv/**"]'})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--project-excludes"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"exclude"})," in Pyright and mypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["While not explicitly part of ",(0,o.jsx)(n.code,{children:"project-excludes"}),", there are several patterns that are\nfiltered out of type checked files at our glob-implementation layer.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Dotfiles (any files that begin with a dot (",(0,o.jsx)(n.code,{children:".<stuff>"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:["Any files that don't end in ",(0,o.jsx)(n.code,{children:".py"})," or ",(0,o.jsx)(n.code,{children:".pyi"})]}),"\n",(0,o.jsxs)(n.li,{children:["Your ",(0,o.jsx)(n.a,{href:"#site-package-path",children:(0,o.jsx)(n.code,{children:"site-package-path"})})," (including paths queried from\nthe interpreter)"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["It is an error if no files are returned from any ",(0,o.jsx)(n.code,{children:"project-includes"})," because\nthey are filtered out by ",(0,o.jsx)(n.code,{children:"project-excludes"})," entries. We differentiate between\nan error from a ",(0,o.jsx)(n.code,{children:"project-includes"})," that doesn't match any files, and an error\nfrom all ",(0,o.jsx)(n.code,{children:"project-includes"})," getting filtered by ",(0,o.jsx)(n.code,{children:"project-excludes"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["When overridden by passing in ",(0,o.jsx)(n.code,{children:"FILES..."}),", we do not consult the\nrelevant config file for what to use for ",(0,o.jsx)(n.code,{children:"project-excludes"}),".\nIf ",(0,o.jsx)(n.code,{children:"project-excludes"})," should not use the default value, override it with the flag as\nwell. See reasoning in ",(0,o.jsxs)(n.a,{href:"#project-includes",children:[(0,o.jsx)(n.code,{children:"project-includes"})," notes"]}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Your ",(0,o.jsx)(n.a,{href:"#site-package-path",children:(0,o.jsx)(n.code,{children:"site-package-path"})})," is added to your ",(0,o.jsx)(n.code,{children:"project-excludes"}),"\nautomatically. If you are trying to perform type checking on a dependency in your\n",(0,o.jsx)(n.code,{children:"site-package-path"})," (i.e. ",(0,o.jsx)(n.code,{children:"cd <site-package-path>/some_dependency && pyrefly check"}),"),\nwe recommend you pull and set up your dependency from GitHub, but you can achieve\nthis on files in your ",(0,o.jsx)(n.code,{children:"site-package-path"})," by setting ",(0,o.jsx)(n.code,{children:"site-package-path = []"})," in\nyour config."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"search-path",children:(0,o.jsx)(n.code,{children:"search-path"})}),"\n",(0,o.jsxs)(n.p,{children:["A file path describing the roots from which imports should be\nfound and imported from (including modules in ",(0,o.jsx)(n.a,{href:"#project-includes",children:(0,o.jsx)(n.code,{children:"project-includes"})}),"). This takes\nthe ",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution#absolute-imports",children:"highest precedence in import order"}),",\nbefore ",(0,o.jsx)(n.code,{children:"typeshed"})," and ",(0,o.jsx)(n.a,{href:"#site-package-path",children:(0,o.jsx)(n.code,{children:"site-package-path"})}),". When a ",(0,o.jsx)(n.code,{children:"project-includes"}),"\ntype checked file is imported by another type checked file, we check all search roots to\ndetermine how to import it."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: list of directories specifying the root"}),"\n",(0,o.jsx)(n.li,{children:"Default: import root"}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--search-path"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"extraPaths"})," in Pyright, ",(0,o.jsx)(n.code,{children:"mypy_path"})," in mypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["We automatically apply some heuristics to improve your experience, especially\nwhen no configuration is provided. See\n",(0,o.jsx)(n.a,{href:"#disable-search-path-heuristics",children:(0,o.jsx)(n.code,{children:"disable-search-path-heuristics"})})," to disable\nthis behavior, and ",(0,o.jsx)(n.a,{href:"#search-path-heuristics",children:"Search Path Heuristics"})," for the\nadditional paths we add to your ",(0,o.jsx)(n.code,{children:"search-path"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Libraries should not be listed here, since they may override ",(0,o.jsx)(n.code,{children:"typeshed"}),"\nvalues for your whole project, and have different import semantics with\nrespect to typing. See\n",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution",children:"Import Resolution"}),"\nfor more information about how modules are imported."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"disable-search-path-heuristics",children:(0,o.jsx)(n.code,{children:"disable-search-path-heuristics"})}),"\n",(0,o.jsx)(n.p,{children:"Disable any search path heuristics/additional search path behavior that Pyrefly will\nattempt to do for you. This can be useful if Pyrefly is picking up the wrong import\npaths for your project, for example, if you have multiple projects in the same\ndirectory or use a monorepo setup with the import root outside of the directory\nyour configuration is defined in."}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"#search-path-heuristics",children:"Search Path Heuristics"})," for more information on the\nsearch paths that are automatically added, and are affected by this flag. For more\ninformation on import resultion in general see the\n",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution",children:"import resolution docs"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: bool"}),"\n",(0,o.jsx)(n.li,{children:"Default: false"}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--disable-search-path-heuristics"})]}),"\n",(0,o.jsx)(n.li,{children:"Equivalent configs: none"}),"\n",(0,o.jsxs)(n.li,{children:["Notes","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["To see what search path we find for your a given file in your project, or\nyour project overall, you can run ",(0,o.jsx)(n.code,{children:"pyrefly dump-config [<file>...]"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"search-path-heuristics",children:(0,o.jsx)(n.strong,{children:"Search Path Heuristics"})}),"\n",(0,o.jsxs)(n.p,{children:["Pyrefly adds extra search paths to your configuration behind-the-scenes to handle\nthe most common ways of setting up and configuring your project, on top of any\n",(0,o.jsx)(n.a,{href:"#search-path",children:(0,o.jsx)(n.code,{children:"search-path"})})," entries you may pass in through the CLI or\nset in your config."]}),"\n",(0,o.jsx)(n.p,{children:"The two heuristics that are currently supported are:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Adding your import root to the end of your search path. Your import root is\na ",(0,o.jsx)(n.code,{children:"src/"})," directory in the same directory as a config file, the parent directory\ncontaining your config file if there's an ",(0,o.jsx)(n.code,{children:"__init__.py"})," or ",(0,o.jsx)(n.code,{children:"__init__.pyi"})," present\n",(0,o.jsx)(n.em,{children:"or"})," the config file's directory itself if none of the previously mentioned directories\nor files can be found.\nSee ",(0,o.jsx)(n.a,{href:"#configuration-finding",children:"Configuration Finding"})," for more information on\nwhat we'll find as a config file."]}),"\n",(0,o.jsxs)(n.li,{children:["If no config can be found, each directory from the given file to ",(0,o.jsx)(n.code,{children:"/"})," will be\nadded as a fallback search path."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["See more on ",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution",children:"how Pyrefly does import resolution"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"site-package-path",children:(0,o.jsx)(n.code,{children:"site-package-path"})}),"\n",(0,o.jsxs)(n.p,{children:["A file path describing a root from which imports should\nbe found and imported from. This takes the lowest priority in import\nresolution, after ",(0,o.jsx)(n.a,{href:"#search-path",children:(0,o.jsx)(n.code,{children:"search-path"})})," and ",(0,o.jsx)(n.code,{children:"typeshed"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["See more on ",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution",children:"how Pyrefly does import resolution"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: list of directories"}),"\n",(0,o.jsxs)(n.li,{children:["Default: result from ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),", or\n",(0,o.jsx)(n.code,{children:"[]"})," if the Python interpreter cannot be queried"]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--site-package-path"})]}),"\n",(0,o.jsx)(n.li,{children:"Equivalent configs: none"}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Ideally, this should not be set manually, unless you're using a venv, running one-off tests,\ntesting specific behavior, or having trouble with ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),".\nSetting this explicitly, especially when not using a venv, will make it difficult for your configuration\nto be reused between different systems and platforms."]}),"\n",(0,o.jsxs)(n.li,{children:["If you're running into problems with editiable installations in your project,\nplease read up on ",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution#editable-installs",children:"editable installs with static analysis tools"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"python-platform",children:(0,o.jsx)(n.code,{children:"python-platform"})}),"\n",(0,o.jsxs)(n.p,{children:["The value used with conditions based on type checking\nagainst\n",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/sys.html#sys.platform",children:(0,o.jsx)(n.code,{children:"sys.platform"})}),"\nvalues."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: string"}),"\n",(0,o.jsxs)(n.li,{children:["Default: result from ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),', or\n"linux" if the Python interpreter cannot be queried']}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--python-platform"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"pythonPlatform"})," in Pyright, ",(0,o.jsx)(n.code,{children:"platform"})," in mypy"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"python-version",children:(0,o.jsx)(n.code,{children:"python-version"})}),"\n",(0,o.jsxs)(n.p,{children:["The value used with conditions based on type checking\nagainst\n",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/sys.html#sys.version",children:(0,o.jsx)(n.code,{children:"sys.version"})}),"\nvalues. The format should be ",(0,o.jsx)(n.code,{children:"<major>[.<minor>[.<micro>]]"}),", where minor and\nmicro can be omitted to take the default positional value."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: string of the format ",(0,o.jsx)(n.code,{children:"<major>[.<minor>[.<micro>]]"})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: result from ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),", or\n",(0,o.jsx)(n.code,{children:"3.13.0"})," if the Python interpreter cannot be queried"]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--python-version"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"pythonVersion"})," in Pyright, ",(0,o.jsx)(n.code,{children:"python_version"})," in mypy"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"conda-environment",children:(0,o.jsx)(n.code,{children:"conda-environment"})}),"\n",(0,o.jsxs)(n.p,{children:["The name of the Conda environment to query when attempting to autoconfigure\nPython environment values (",(0,o.jsx)(n.code,{children:"site-package-path"}),", ",(0,o.jsx)(n.code,{children:"python-platform"}),", ",(0,o.jsx)(n.code,{children:"python-version"}),").\nSee the ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration section"})," for more\ninformation. We query Conda with ",(0,o.jsx)(n.code,{children:"conda info --envs"}),", then find the environment's interpreter in Environment Autoconfirugration."]}),"\n",(0,o.jsxs)(n.p,{children:["We will query Conda for information about this environment, even when it's not sourced,\nunless a Python environment (venv, Conda) is activated or ",(0,o.jsx)(n.code,{children:"--python-interpreter"})," or\n",(0,o.jsx)(n.code,{children:"--conda-environment"})," are passed in through the CLI."]}),"\n",(0,o.jsxs)(n.p,{children:["This configuration option ",(0,o.jsxs)(n.strong,{children:["is mutually exclusive with ",(0,o.jsx)(n.code,{children:"python-interpreter"})," and ",(0,o.jsx)(n.code,{children:"skip-interpreter-query"})]}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: string of existing Conda environment name"}),"\n",(0,o.jsx)(n.li,{children:"Default: none"}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--conda-environment"})]}),"\n",(0,o.jsx)(n.li,{children:"Equivalent configs: none"}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This enables the use of a non-local but customizable global environment without having to hard-code a path, which is not preferable on a shared project."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"python-interpreter",children:(0,o.jsx)(n.code,{children:"python-interpreter"})}),"\n",(0,o.jsxs)(n.p,{children:["The Python interpreter to query when attempting to autoconfigure\nPython environment values (",(0,o.jsx)(n.code,{children:"site-package-path"}),", ",(0,o.jsx)(n.code,{children:"python-platform"}),", ",(0,o.jsx)(n.code,{children:"python-version"}),").\nSee the ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration section"})," for more information."]}),"\n",(0,o.jsxs)(n.p,{children:["This configuration option ",(0,o.jsxs)(n.strong,{children:["is mutually exclusive with ",(0,o.jsx)(n.code,{children:"conda-environment"})," and ",(0,o.jsx)(n.code,{children:"skip-interpreter-query"})]}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: path to executable"}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"$(which python3)"}),", then ",(0,o.jsx)(n.code,{children:"$(which python)"}),", or none"]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--python-interpreter"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"python_executable"})," in mypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["This executes the value present in the ",(0,o.jsx)(n.code,{children:"python-interpreter"})," field without any checks. It could\nbe a security risk if your ",(0,o.jsx)(n.code,{children:"python-interpreter"})," is an arbitrary executable."]}),"\n",(0,o.jsxs)(n.li,{children:["If you don't have a Python interpreter installed on your machine, we'll output an\nerror letting you that we couldn't appropriately configure your environment.\nConfigure ",(0,o.jsx)(n.code,{children:"skip-interpreter-query"})," to skip the check and avoid the error."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["NOTE: Ideally, this should not be set manually, unless you're using a venv, running one-off tests,\ntesting specific behavior, or having trouble with ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),".\nSetting this explicitly, especially when not using a venv, will make it difficult for your configuration\nto be reused between different systems and platforms."]}),"\n",(0,o.jsx)(n.h3,{id:"skip-interpreter-query",children:(0,o.jsx)(n.code,{children:"skip-interpreter-query"})}),"\n",(0,o.jsxs)(n.p,{children:["Skip querying any interpreters and do not do any\n",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),". This means that\nPyrefly will take hard-coded defaults for ",(0,o.jsx)(n.a,{href:"#python-version%60",children:(0,o.jsx)(n.code,{children:"python-version"})}),"\nand ",(0,o.jsx)(n.a,{href:"#python-platform",children:(0,o.jsx)(n.code,{children:"python-platform"})}),", and will use an empty\n",(0,o.jsx)(n.a,{href:"#site-package-path",children:(0,o.jsx)(n.code,{children:"site-package-path"})}),". It's likely you'll want to override\nthese to match the environment you'll be running in."]}),"\n",(0,o.jsxs)(n.p,{children:["This configuration option ",(0,o.jsxs)(n.strong,{children:["is mutually exclusive with ",(0,o.jsx)(n.code,{children:"python-interpreter"})," and ",(0,o.jsx)(n.code,{children:"conda-environment"})]}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: bool"}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"false"})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--skip-interpreter-query"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"typeshed-path",children:(0,o.jsx)(n.code,{children:"typeshed-path"})}),"\n",(0,o.jsx)(n.p,{children:"Override the version of typeshed that's being used for type checking. The provided\npath should point to the root of typeshed."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/python/typeshed",children:"Typeshed"})," contains the type information for Python's\nstandard library, which Pyrefly uses for type checking and resolving both the most basic\ntypes (like ",(0,o.jsx)(n.code,{children:"object"}),", ",(0,o.jsx)(n.code,{children:"str"}),", ...) and types/type signatures from stdlib modules."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: path to typeshed"}),"\n",(0,o.jsx)(n.li,{children:"Default: none (resolves to bundled typeshed)"}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--typeshed-path"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"errors",children:(0,o.jsx)(n.code,{children:"errors"})}),"\n",(0,o.jsxs)(n.p,{children:["Configure the severity for each kind of error that Pyrefly emits: ",(0,o.jsx)(n.code,{children:"error"}),", ",(0,o.jsx)(n.code,{children:"warn"}),", ",(0,o.jsx)(n.code,{children:"ignore"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: Table of ",(0,o.jsx)(n.a,{href:"/en/docs/error-kinds",children:"error code"})," to boolean representing enabled status"]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"errors = {}"}),"/",(0,o.jsx)(n.code,{children:"[errors]"})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--error"}),", ",(0,o.jsx)(n.code,{children:"--warn"}),", ",(0,o.jsx)(n.code,{children:"--ignore"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs:\n",(0,o.jsx)(n.a,{href:"https://microsoft.github.io/pyright/#/configuration?id=type-check-rule-overrides",children:"type check rule overrides"}),"\nand ",(0,o.jsx)(n.a,{href:"https://microsoft.github.io/pyright/#/configuration?id=type-evaluation-settings",children:"type evaluation settings"}),"\nin Pyright,\n",(0,o.jsx)(n.a,{href:"https://mypy.readthedocs.io/en/stable/config_file.html#confval-enable_error_code",children:(0,o.jsx)(n.code,{children:"enable_error_code"})})," and\n",(0,o.jsx)(n.a,{href:"https://mypy.readthedocs.io/en/stable/config_file.html#confval-disable_error_code",children:(0,o.jsx)(n.code,{children:"disable_error_code"})}),"\nin mypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Setting ",(0,o.jsx)(n.code,{children:"<error-code> = true"})," is the same as having no error code configuration present, which means\nthe error will be shown. Setting ",(0,o.jsx)(n.code,{children:"<error-code> = false"})," will disable the error for type checking."]}),"\n",(0,o.jsxs)(n.li,{children:["If you want to disable type errors in IDE mode, you can also set\n",(0,o.jsx)(n.a,{href:"#disable-type-errors-in-ide",children:(0,o.jsx)(n.code,{children:"disable-type-errors-in-ide"})}),", which will\nautomatically disable ",(0,o.jsx)(n.em,{children:"all"})," type errors and Pyrefly diagnostics in the IDE."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"disable-type-errors-in-ide",children:(0,o.jsx)(n.code,{children:"disable-type-errors-in-ide"})}),"\n",(0,o.jsxs)(n.p,{children:["Disables type errors from showing up when running Pyrefly in an IDE. This is primarily\nused when Pyrefly is acting in a language-server-only mode, but some kind of\nmanual configuration is necessary for it to work properly, or when you would\n",(0,o.jsx)(n.em,{children:"only"})," want to see type errors on CLI/CI runs."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: ",(0,o.jsx)(n.code,{children:"bool"})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"false"})]}),"\n",(0,o.jsx)(n.li,{children:"Flag equivalent: none"}),"\n",(0,o.jsxs)(n.li,{children:["Notes: if you want to disable errors on CLI/CI runs as well, or if you're looking\nto turn on/off specific errors, you may be looking for the ",(0,o.jsx)(n.a,{href:"#errors",children:(0,o.jsx)(n.code,{children:"errors"})})," config\noption instead."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"replace-imports-with-any",children:(0,o.jsx)(n.code,{children:"replace-imports-with-any"})}),"\n",(0,o.jsxs)(n.p,{children:["Instruct Pyrefly to unconditionally replace the given ",(0,o.jsx)(n.a,{href:"#module-globbing",children:(0,o.jsx)(n.code,{children:"ModuleGlob"})}),"s\nwith ",(0,o.jsx)(n.code,{children:"typing.Any"})," and ignore import errors for the module. For example,\nwith ",(0,o.jsx)(n.code,{children:"from x.y import z"})," in a file, adding ",(0,o.jsx)(n.code,{children:"x.*"}),", ",(0,o.jsx)(n.code,{children:"*.y"}),", or ",(0,o.jsx)(n.code,{children:"x.y"})," to this config will\nsilence those import errors and replace the module with ",(0,o.jsx)(n.code,{children:"typing.Any"}),". If the module\ncan be found, its type information will still be replaced with ",(0,o.jsx)(n.code,{children:"typing.Any"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["This is different from ",(0,o.jsx)(n.a,{href:"#ignore-missing-imports",children:(0,o.jsx)(n.code,{children:"ignore-missing-imports"})}),", which only\nreplaces the import with ",(0,o.jsx)(n.code,{children:"typing.Any"})," if it can't be found."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: list of regex"}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"[]"})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--replace-imports-with-any"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"follow_imports = skip"})," in mypy"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"ignore-missing-imports",children:(0,o.jsx)(n.code,{children:"ignore-missing-imports"})}),"\n",(0,o.jsxs)(n.p,{children:["Instruct Pyrefly to replace the given ",(0,o.jsx)(n.a,{href:"#module-globbing",children:(0,o.jsx)(n.code,{children:"ModuleGlob"})}),"s\nwith ",(0,o.jsx)(n.code,{children:"typing.Any"})," and ignore import errors for the module ",(0,o.jsx)(n.em,{children:"only when the module\ncan't be found"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, with ",(0,o.jsx)(n.code,{children:"from x.y import z"})," in a file, adding ",(0,o.jsx)(n.code,{children:"x.*"}),", ",(0,o.jsx)(n.code,{children:"*.y"}),", or ",(0,o.jsx)(n.code,{children:"x.y"})," to\nthis config will silence those import errors and replace the module with ",(0,o.jsx)(n.code,{children:"typing.Any"}),"\nif ",(0,o.jsx)(n.code,{children:"x.y"})," can't be found. If ",(0,o.jsx)(n.code,{children:"x.y"})," can be found, then ",(0,o.jsx)(n.code,{children:"z"}),"'s type will be used."]}),"\n",(0,o.jsxs)(n.p,{children:["This is different from ",(0,o.jsx)(n.a,{href:"#replace-imports-with-any",children:(0,o.jsx)(n.code,{children:"replace-imports-with-any"})}),", which\nwill always, unconditionally replace the import with ",(0,o.jsx)(n.code,{children:"typing.Any"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: list of regex"}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"[]"})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--ignore-missing-imports"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"ignore_missing_imports"})," in mypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"errors = {import-error = false}"})," (TOML inline table for ",(0,o.jsx)(n.code,{children:"errors"}),") has similar behavior in Pyrefly, but ignores\n",(0,o.jsx)(n.em,{children:"all"})," import errors instead of import errors from specific modules."]}),"\n",(0,o.jsxs)(n.li,{children:["When a ",(0,o.jsx)(n.code,{children:".pyc"})," file is encountered and no source/stub files are available, Pyrefly automatically treats module as ",(0,o.jsx)(n.code,{children:"typing.Any"}),".\nThis behavior ensures that compiled Python files without available source code do not cause import errors and are handled permissively."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"ignore-errors-in-generated-code",children:(0,o.jsx)(n.code,{children:"ignore-errors-in-generated-code"})}),"\n",(0,o.jsxs)(n.p,{children:["Whether to ignore type errors in generated code. If enabled, generated files\nwill be treated as if they are included in ",(0,o.jsx)(n.code,{children:"project-excludes"}),".\nThe generated code status is determined by checking if the file contents contain\nthe substring '",(0,o.jsx)("span",{children:"@"}),"generated'."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: bool"}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"false"})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--ignore-errors-in-generated-code"})]}),"\n",(0,o.jsx)(n.li,{children:"Equivalent configs: none"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"ignore-missing-source",children:(0,o.jsx)(n.code,{children:"ignore-missing-source"})}),"\n",(0,o.jsxs)(n.p,{children:["Whether to skip the check for a non-stubs package when a ",(0,o.jsx)(n.code,{children:"-stubs"})," package is found in\n",(0,o.jsx)(n.a,{href:"#site-package-path",children:(0,o.jsx)(n.code,{children:"site-package-path"})}),". When this is true, we immediately return\na ",(0,o.jsx)(n.code,{children:"-stubs"})," package when found."]}),"\n",(0,o.jsxs)(n.p,{children:["The check for a non-stubs package exists to ensure you have an importable package to use\nin your project. When this check returns an import error, it means we couldn't find a package,\nand that at runtime you may not actually be able to import the given package, even if its\ntype stubs could be found. See\n",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution#stub-files-vs-source-files",children:"Stub Files vs Source Files"})," for more information."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: bool"}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"true"})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--ignore-missing-source"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"reportMissingModuleSource"})," in Pyright"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"infer-with-first-use",children:(0,o.jsx)(n.code,{children:"infer-with-first-use"})}),"\n",(0,o.jsxs)(n.p,{children:["Whether to infer type variables not determined by a call or constructor based on their first usage.\nThis includes empty containers like ",(0,o.jsx)(n.code,{children:"[]"})," and ",(0,o.jsx)(n.code,{children:"{}"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The default behavior is similar to Mypy - the type of the variable is inferred based on the first usage."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'x = []\nx.append(1)  # x is list[int]\nx.append("2")  # error!\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Setting this to false will make Pyrefly infer ",(0,o.jsx)(n.code,{children:"Any"})," for unsolved type variables, which behaves like Pyright."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'x = []  # x is list[Any]\nx.append(1)  # ok\nx.append("2")  # ok\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: bool"}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"true"})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--infer-with-first-use"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"untyped-def-behavior",children:(0,o.jsx)(n.code,{children:"untyped-def-behavior"})}),"\n",(0,o.jsx)(n.p,{children:"How should Pyrefly treat function definitions with no parameter or return type annotations?"}),"\n",(0,o.jsxs)(n.p,{children:["By default, Pyrefly uses the ",(0,o.jsx)(n.code,{children:'"check-and-infer-return-type"'})," behavior and will\ncheck all function bodies, inferring the return type."]}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsxs)(n.p,{children:["To provide inferred return types with ",(0,o.jsx)(n.code,{children:"check-and-infer-return-type"}),", especially for\nsite-package paths (third-party packages), Pyrefly may need to load and analyze\nmore modules than you might otherwise see from mypy."]}),(0,o.jsxs)(n.p,{children:["This may result in increased type check durations or an output showing more modules\nanalyzed than you expect. If this behavior is not preferred, you should set\n",(0,o.jsx)(n.code,{children:"untyped-def-behavior"})," to ",(0,o.jsx)(n.code,{children:"skip-and-infer-return-any"})," in your config or pass it in\nas a flag."]})]}),"\n",(0,o.jsxs)(n.p,{children:["If this option is set to ",(0,o.jsx)(n.code,{children:'"check-and-infer-return-any"'}),", then Pyrefly will still\ncheck the function body but will treat the return type as ",(0,o.jsx)(n.code,{children:"Any"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["If this option is set to ",(0,o.jsx)(n.code,{children:'"skip-and-infer-return-any"'}),", Pyrefly will again treat\nthe return type as ",(0,o.jsx)(n.code,{children:"Any"}),", but will also skip checking the function body. In this\ncase, Pyrefly will also infer ",(0,o.jsx)(n.code,{children:"Any"})," as the type of any attributes inferred based\non this function body. This behavior is what PEP 484 specifies, although we do\nnot recommend it for most users today; since Pyrefly will not analyze the bodies\nof untyped functions, language server functionality like showing types on hover\nand finding definitions will not be available there."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"skip-and-infer-return-any"})," is mypy's default inference behavior, and how we will\nattempt to migrate your existing mypy configuration when running ",(0,o.jsx)(n.code,{children:"pyrefly init"}),".\nSee ",(0,o.jsx)(n.a,{href:"/en/docs/migrating-from-mypy#mypy-config-migration",children:"Migrating from Mypy"})," for more information on config migration."]})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: one of ",(0,o.jsx)(n.code,{children:'"check-and-infer-return-type"'}),", ",(0,o.jsx)(n.code,{children:'"check-and-infer-return-any"'}),",\n",(0,o.jsx)(n.code,{children:'"skip-and-infer-return-any"'})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:'"check-and-infer-return-type"'})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--untyped-def-behavior"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:'"check-and-infer-return-type"'})," behavior emulates Pyright's default\nbehavior."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:'"skip-and-infer-return-any"'})," behavior emulates mypy's default behavior."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:'"check-and-infer-return-any"'})," behavior emulates mypy's\n",(0,o.jsx)(n.code,{children:"check_untyped_defs"})," flag."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"use-ignore-files",children:(0,o.jsx)(n.code,{children:"use-ignore-files"})}),"\n",(0,o.jsxs)(n.p,{children:["Whether to allow Pyrefly to use ignore files in your project and automatically\nadd excluded files and directories to your ",(0,o.jsx)(n.a,{href:"#project-excludes",children:(0,o.jsx)(n.code,{children:"project-excludes"})}),".\nSimilar to ",(0,o.jsx)(n.code,{children:"project-excludes"}),", when explicitly specifying files to check, ignore files\nare not used."]}),"\n",(0,o.jsxs)(n.p,{children:["Pyrefly automatically searches for ignore files such as ",(0,o.jsx)(n.code,{children:".gitignore"}),", ",(0,o.jsx)(n.code,{children:".ignore"}),",\nand ",(0,o.jsx)(n.code,{children:".git/info/excludes"})," in an upward search from your project root. Only the first of each\ntype of ignore file will be used, so if you have a ",(0,o.jsx)(n.code,{children:".gitignore"})," and ",(0,o.jsx)(n.code,{children:".git/info/excludes"}),"\navailable, in different directories, Pyrefly will use both of them. Pyrefly will not\nuse global ignore files."]}),"\n",(0,o.jsxs)(n.p,{children:["When multiple ignore files are found, Pyrefly checks them for excludes matches when\ndetermining the files to type check in the order of ",(0,o.jsx)(n.code,{children:".gitignore"}),", ",(0,o.jsx)(n.code,{children:".ignore"}),", and\n",(0,o.jsx)(n.code,{children:".git/info/excludes"}),", taking the result of the first ignore file that has a match (either\nallowlist or denylist). Regular\n",(0,o.jsxs)(n.a,{href:"https://git-scm.com/docs/gitignore",children:[(0,o.jsx)(n.code,{children:".gitignore"}),"-style allowlist/denylist matching rules"]})," apply."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: ",(0,o.jsx)(n.code,{children:"bool"})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"true"})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--use-ignore-files"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"permissive-ignores",children:(0,o.jsx)(n.code,{children:"permissive-ignores"})}),"\n",(0,o.jsxs)(n.p,{children:["Should Pyrefly ignore errors based on annotations from other tools, e.g. ",(0,o.jsx)(n.code,{children:"# pyre-ignore"})," or ",(0,o.jsx)(n.code,{children:"# mypy: ignore"}),"?\nBy default, respects ",(0,o.jsx)(n.code,{children:"# pyrefly: ignore"})," and ",(0,o.jsx)(n.code,{children:"# type: ignore"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: ",(0,o.jsx)(n.code,{children:"bool"})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"false"})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--permissive-ignores"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"sub-config",children:(0,o.jsx)(n.code,{children:"sub-config"})}),"\n",(0,o.jsxs)(n.p,{children:["Override specific config values for matched paths in your project. See\n",(0,o.jsx)(n.a,{href:"#subconfigs",children:"SubConfigs"})," for more information on the structure\nand values that can be overridden here."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: ",(0,o.jsx)(n.a,{href:"https://toml.io/en/v1.0.0#array-of-tables",children:"TOML array of tables"})," with a ",(0,o.jsx)(n.a,{href:"#subconfigs",children:"SubConfig structure"})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"[]"})]}),"\n",(0,o.jsx)(n.li,{children:"Flag equivalent: none"}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"executionEnvironments"})," in Pyright, per-module config options in mypy"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-details",children:"Configuration Details"}),"\n",(0,o.jsx)(n.p,{children:"This section describes some of the configuration options, behaviors, or types in more depth, when\nthere are details shared between multiple config options or the information is more than what\ncan fit under a single config option description."}),"\n",(0,o.jsx)(n.h3,{id:"environment-autoconfiguration",children:"Environment Autoconfiguration"}),"\n",(0,o.jsxs)(n.p,{children:["Unless ",(0,o.jsx)(n.code,{children:"skip-interpreter-query"})," is set, we'll attempt to query a Python interpreter to\ndetermine your ",(0,o.jsx)(n.a,{href:"#python-platform",children:(0,o.jsx)(n.code,{children:"python-platform"})})," or\n",(0,o.jsx)(n.a,{href:"#python-version",children:(0,o.jsx)(n.code,{children:"python-version"})})," if they're unset. We also get a\n",(0,o.jsx)(n.a,{href:"#site-package-path",children:(0,o.jsx)(n.code,{children:"site-package-path"})})," from your interpreter to determine which\npackages you have installed and append those to the end of any ",(0,o.jsx)(n.code,{children:"site-package-path"}),"\nyou've configured yourself, either through CLI flags or a config file."]}),"\n",(0,o.jsx)(n.p,{children:"We look for an interpreter with the following logic:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.a,{href:"#python-interpreter",children:(0,o.jsx)(n.code,{children:"python-interpreter"})})," or\n",(0,o.jsx)(n.a,{href:"#conda-environment",children:(0,o.jsx)(n.code,{children:"conda-environment"})})," if either are set by a flag.\nBoth cannot be set in flags at the same time."]}),"\n",(0,o.jsxs)(n.li,{children:["Determine if there's an active ",(0,o.jsx)(n.code,{children:"venv"})," or ",(0,o.jsx)(n.code,{children:"conda"})," environment. If both are active at\nthe same time, we take ",(0,o.jsx)(n.code,{children:"venv"})," over ",(0,o.jsx)(n.code,{children:"conda"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.a,{href:"#python-interpreter",children:(0,o.jsx)(n.code,{children:"python-interpreter"})})," or\n",(0,o.jsx)(n.a,{href:"#conda-environment",children:(0,o.jsx)(n.code,{children:"conda-environment"})})," if either are set in a config file.\nBoth cannot be set in a config at the same time."]}),"\n",(0,o.jsxs)(n.li,{children:["Find a ",(0,o.jsx)(n.code,{children:"venv"})," at the root of the project by searching for something that looks like a\nPython interpreter (matches ",(0,o.jsx)(n.code,{children:"python(\\d(\\.\\d+)?)?(.exe)?"})," regex), and looking\nfor a ",(0,o.jsx)(n.code,{children:"pyvenv.cfg"})," file in known locations. If we can't determine the root of your\nproject with a config file or other well-known root marker file (e.g. ",(0,o.jsx)(n.code,{children:"setup.py"}),",\n",(0,o.jsx)(n.code,{children:"pyrightconfig.json"}),", ",(0,o.jsx)(n.code,{children:"mypy.ini"}),"), this step is skipped."]}),"\n",(0,o.jsxs)(n.li,{children:["Query ",(0,o.jsx)(n.code,{children:"$(which python3)"})," and ",(0,o.jsx)(n.code,{children:"$(which python)"})," (platform independent) to use\na system-installed interpreter."]}),"\n",(0,o.jsx)(n.li,{children:"Fall back to Pyrefly's default values for any unspecified config options."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The config options we query the interpreter for are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"python-platform"}),": ",(0,o.jsx)(n.code,{children:"sys.platform"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"python-version"}),": ",(0,o.jsx)(n.code,{children:"sys.version_info[:3]"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"site-package-path"}),": ",(0,o.jsx)(n.code,{children:"site.getsitepackages() + [site.getusersitepackages()]"})]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["You can run ",(0,o.jsx)(n.code,{children:"pyrefly dump-config"})," and pass in your file or configuration like you would\nwith ",(0,o.jsx)(n.code,{children:"pyrefly check"})," to see what Pyrefly finds for your Python interpreter and\n",(0,o.jsx)(n.code,{children:"site-package-path"}),", along with other useful config-debugging features."]})}),"\n",(0,o.jsx)(n.h3,{id:"filesystem-globbing",children:"Filesystem Globbing"}),"\n",(0,o.jsxs)(n.p,{children:["We use a standard Unix-style glob, which allows for wildcard matching when specifying a fileset. It is similar\nto regex, but more restricted given the subset of allowed syntax for paths on a filesystem. We currently only\nallow matching files with a ",(0,o.jsx)(n.code,{children:".py"}),", ",(0,o.jsx)(n.code,{children:".pyi"}),", or ",(0,o.jsx)(n.code,{children:".pyw"})," suffix."]}),"\n",(0,o.jsx)(n.p,{children:"The globs provided are relative to the config, if one is found, or the current working directory otherwise.\nAbsolute path globs can also be provided, though this is generally not recommended, since it may not\nbe compatible with other systems type checking your project."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["We recognize the following wildcards:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"*"})," matches zero or more characters in a single directory component"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"**"})," matches the current and any sub directories/files in those sub directories"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"?"})," matches any one character"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"[<pattern>]"})," matches any character or character range between the brackets (character range separated by ",(0,o.jsx)(n.code,{children:"-"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"[!<pattern>]"})," excludes any character or character range between the brackets and after the ",(0,o.jsx)(n.code,{children:"!"})]}),"\n",(0,o.jsxs)(n.li,{children:["Note: ",(0,o.jsx)(n.code,{children:"[]"})," can be used to match ",(0,o.jsx)(n.code,{children:"?"}),", ",(0,o.jsx)(n.code,{children:"*"}),", ",(0,o.jsx)(n.code,{children:"["}),", ",(0,o.jsx)(n.code,{children:"]"})," literally (e.g. ",(0,o.jsx)(n.code,{children:"[?]"}),"), although these are invalid as part of a Python path."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["We also support non-wildcard paths, so a relative (or absolute) path like ",(0,o.jsx)(n.code,{children:"src/"})," will match all Python files under ",(0,o.jsx)(n.code,{children:"src/"}),"\nor ",(0,o.jsx)(n.code,{children:"src/my_file.py"})," will match ",(0,o.jsx)(n.code,{children:"src/my_file.py"})," exactly."]}),"\n",(0,o.jsxs)(n.p,{children:["Any directories matched will also have their ",(0,o.jsx)(n.code,{children:".py"})," and ",(0,o.jsx)(n.code,{children:".pyi"})," files recursively matched. ",(0,o.jsx)(n.code,{children:"src/*"})," will match all files and\ndirectories under ",(0,o.jsx)(n.code,{children:"src/"}),", so therefore, we will recursively match everything under ",(0,o.jsx)(n.code,{children:"src/"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Examples:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"src/**/*.py"}),": only match ",(0,o.jsx)(n.code,{children:".py"})," files under ",(0,o.jsx)(n.code,{children:"src/"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"src"}),", ",(0,o.jsx)(n.code,{children:"src/"}),", ",(0,o.jsx)(n.code,{children:"src/*"}),", ",(0,o.jsx)(n.code,{children:"src/**"}),", and ",(0,o.jsx)(n.code,{children:"src/**/*"}),": match all ",(0,o.jsx)(n.code,{children:".py"})," and ",(0,o.jsx)(n.code,{children:".pyi"})," files under `src/"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"?.py"})," and ",(0,o.jsx)(n.code,{children:"[A-z].py"}),": match any file that looks like ",(0,o.jsx)(n.code,{children:"<letter>.py"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"src/path/to/my/file.py"}),": only match ",(0,o.jsx)(n.code,{children:"src/path/to/my/file.py"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"src/**/tests"}),", ",(0,o.jsx)(n.code,{children:"src/**/tests/"}),", ",(0,o.jsx)(n.code,{children:"src/**/tests/**"}),", and ",(0,o.jsx)(n.code,{children:"src/**/tests/**/*"}),": match all ",(0,o.jsx)(n.code,{children:".py"})," and ",(0,o.jsx)(n.code,{children:".pyi"})," files in ",(0,o.jsx)(n.code,{children:"src/"}),"\nunder a directory named ",(0,o.jsx)(n.code,{children:"tests"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"module-globbing",children:"Module Globbing"}),"\n",(0,o.jsxs)(n.p,{children:["In some config options, we've added globbing for module paths. This is different from both path globs and regex,\nin the sense that we're performing a match on a Python dotted import, such as ",(0,o.jsx)(n.code,{children:"this.is.any.module"}),".\nThe only wildcard we recognize is ",(0,o.jsx)(n.code,{children:"*"}),", which represents zero or more segments of a module path, unless it starts a glob,\nin which case it must match one or more segments. The wildcard must be surrounded\nby ",(0,o.jsx)(n.code,{children:"."}),", unless it is at the start or end of a module glob."]}),"\n",(0,o.jsx)(n.p,{children:"Examples:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"this.is.a.module"})," would be equivalent to a regex like ",(0,o.jsx)(n.code,{children:"^this\\.is\\.a\\.module"}),". It will only match imports that look like\n",(0,o.jsx)(n.code,{children:"this.is.a.module"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"this.is.*.module"})," would become ",(0,o.jsx)(n.code,{children:"^this\\.is(\\..+)*\\.module$"}),". It would match:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is.module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is.a.module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is.a.really.long.path.to.a.module"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"*.my.module"})," would be equivalent to a regex like ",(0,o.jsx)(n.code,{children:"^.+\\.my\\.module$"}),".","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["It would match:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is.my.module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"heres.my.module"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["It will not match:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"my.module"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"this.is.*"})," would be equivalent to a regex like ",(0,o.jsx)(n.code,{children:"^this\\.is(\\..+)*"}),". It would match:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is.my.module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"sub-configs",children:(0,o.jsx)(n.code,{children:"Sub-Configs"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Sub-Configs"})," are a method for overriding one or more config options for specific files based on\nfilepath glob matching. Only certain config options are allowed to be overridden, and a need\nto override other configs means you likely need to use a separate config file for your subdirectory.\nYou can have as many SubConfigs as you want in a project, and even multiple separate SubConfigs\nthat can apply to a given file when the ",(0,o.jsx)(n.code,{children:"matches"})," glob pattern matches."]}),"\n",(0,o.jsx)(n.h4,{id:"subconfig-allowed-overrides",children:(0,o.jsx)(n.strong,{children:"SubConfig Allowed Overrides"})}),"\n",(0,o.jsx)(n.p,{children:"We currently allow the following config options to be overridden in a SubConfig:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"errors"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"replace-imports-with-any"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"untyped-def-behavior"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"ignore-errors-in-generated-code"})}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["All SubConfig overrides ",(0,o.jsx)(n.em,{children:"replace"})," the values appearing in the 'root' or top-level of the\nPyrefly configuration."]}),"\n",(0,o.jsxs)(n.p,{children:["Any configs that change the list of files we're type checking, Python environment, or where we look\nfor imports cannot be included in SubConfigs. Some other configs we also do not include because\nwe think they make it difficult to reason about your project type checks, but you can\n",(0,o.jsx)(n.a,{href:"https://github.com/facebook/pyrefly/issues",children:"open an issue"})," or make a pull request if you disagree\nand would like to see the option supported."]}),"\n",(0,o.jsx)(n.h4,{id:"subconfig-table-structure",children:(0,o.jsx)(n.strong,{children:"SubConfig Table Structure"})}),"\n",(0,o.jsx)(n.p,{children:"A SubConfig has two or more entries:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["a ",(0,o.jsx)(n.code,{children:"matches"})," key, with a ",(0,o.jsx)(n.a,{href:"#filesystem-globbing",children:"Filesystem Glob"})," detailing which files the config\napplies to."]}),"\n",(0,o.jsxs)(n.li,{children:["at least one of the ",(0,o.jsx)(n.a,{href:"#subconfig-allowed-overrides",children:"SubConfig allowed overrides"})]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"subconfig-option-selection",children:(0,o.jsx)(n.strong,{children:"SubConfig Option Selection"})}),"\n",(0,o.jsxs)(n.p,{children:["Since you can have more than one SubConfig matching a file, we need to define a resolution order\nto determine which SubConfig's option should be selected. Pyrefly does this by filtering\nSubConfigs whose ",(0,o.jsx)(n.code,{children:"matches"})," does not match the given file, then takes the first non-null\nvalue that can be found in the order the SubConfigs appear in your configuration."]}),"\n",(0,o.jsx)(n.p,{children:"If no SubConfigs match, or there are no non-null config options present, then we take\nthe value in the 'root'/top-level Pyrefly config (or Pyrefly default if no value is specified)."}),"\n",(0,o.jsx)(n.h4,{id:"subconfig-example",children:(0,o.jsx)(n.strong,{children:"SubConfig Example"})}),"\n",(0,o.jsx)(n.p,{children:"For the following config, this how options would be resolved."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'replace-imports-with-any = [\n  "sympy.*",\n  "*.series",\n]\nignore-errors-in-generated-code = true\n\n# disable `bad-assignment` and `invalid-argument` for the whole project\n[errors]\nbad-assignment = false\ninvalid-argument = false\n\n[[sub-config]]\n# apply this to `sub/project/tests/file.py`\nmatches = "sub/project/tests/file.py"\n\n# any unittest imports will by typed as `typing.Any`\nreplace-imports-with-any = ["unittest.*"]\n\n[[sub-config]]\n# apply this config to all files in `sub/project`\nmatches = "sub/project/**"\n\n# enable `assert-type` errors in `sub/project`\n[sub-config.errors]\nassert-type = true\n\n[[sub-config]]\n# apply this config to all files in `sub`\nmatches = "sub/**`\n\n# disable `assert-type` errors in `sub`\n[sub-config.errors]\nassert-type = false\n\n[[sub-config]]\n# apply this config to all files under `tests` dirs in `sub/`\nmatches = "sub/**/tests/**"\n\n# any pytest imports will be typed as `typing.Any`\nreplace-imports-with-any = ["pytest.*"]\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"sub/project/tests/file.py"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"replace-imports-with-any"}),": ",(0,o.jsx)(n.code,{children:'["unittest.*"]'})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"errors"}),": ",(0,o.jsx)(n.code,{children:"{assert-type = true}"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ignore-errors-in-generated-code"}),": ",(0,o.jsx)(n.code,{children:"true"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ignore-missing-source"}),": ",(0,o.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"sub/project/tests/another_file.py"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"replace-imports-with-any"}),": ",(0,o.jsx)(n.code,{children:'["pytest.*"]'})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"errors"}),": ",(0,o.jsx)(n.code,{children:"{assert-type = true}"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ignore-errors-in-generated-code"}),": ",(0,o.jsx)(n.code,{children:"true"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ignore-missing-source"}),": ",(0,o.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"sub/project/non_test_file.py"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"replace-imports-with-any"}),": ",(0,o.jsx)(n.code,{children:'["sympy.*", "*.series"]'})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"errors"}),": ",(0,o.jsx)(n.code,{children:"{assert-type = true}"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ignore-errors-in-generated-code"}),": ",(0,o.jsx)(n.code,{children:"true"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ignore-missing-source"}),": ",(0,o.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"sub/sub_file.py"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"replace-imports-with-any"}),": ",(0,o.jsx)(n.code,{children:'["sympy.*", "*.series"]'})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"errors"}),": ",(0,o.jsx)(n.code,{children:"{assert-type = false}"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ignore-errors-in-generated-code"}),": ",(0,o.jsx)(n.code,{children:"true"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ignore-missing-source"}),": ",(0,o.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"top_level_file.py"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"replace-imports-with-any"}),": ",(0,o.jsx)(n.code,{children:'["sympy.*", "*.series"]'})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"errors"}),": ",(0,o.jsx)(n.code,{children:"{assert-type = true, bad-assignment = false, invalid-argument = false}"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ignore-errors-in-generated-code"}),": ",(0,o.jsx)(n.code,{children:"true"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ignore-missing-source"}),": ",(0,o.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"conda-and-venv-support",children:"Conda and Venv Support"}),"\n",(0,o.jsxs)(n.p,{children:["We plan on adding extra automatic support for ",(0,o.jsx)(n.a,{href:"https://github.com/facebook/pyrefly/issues/2",children:"Conda"}),"\nand ",(0,o.jsx)(n.a,{href:"https://github.com/facebook/pyrefly/issues/1",children:"Venv"})," at some point soon, but we haven't made\nit around to doing this yet. If you would like to import packages from these in the meantime,\nyou can follow the following steps."]}),"\n",(0,o.jsx)(n.h3,{id:"venv",children:"Venv"}),"\n",(0,o.jsxs)(n.p,{children:["If you have a venv set up locally, you can get Pyrefly working with it by having your venv sourced\nin your shell (",(0,o.jsx)(n.code,{children:"source .venv/bin/activate"}),"), and we will automatically pick up your installed packages. To pick\nup your packages even when your environment isn't sourced, you can add ",(0,o.jsx)(n.code,{children:".venv/bin/python3"})," (or\n",(0,o.jsx)(n.code,{children:"<path_to_venv>/bin/python3"}),") to your Pyrefly configuration under\n",(0,o.jsx)(n.a,{href:"#python-interpreter",children:(0,o.jsx)(n.code,{children:"python-interpreter"})})," or pass it in with the ",(0,o.jsx)(n.code,{children:"--python-interpreter"})," flag."]}),"\n",(0,o.jsx)(n.h3,{id:"conda",children:"Conda"}),"\n",(0,o.jsxs)(n.p,{children:["If you have conda set up locally, you can get Pyrefly working with it by having your Conda environment\nsourced in your shell (",(0,o.jsx)(n.code,{children:"conda activate <environment>"}),"), and we will automatically pick up your installed packages.\nTo pick up your packages even when your environment isn't sourced, you can query your environment's install\nlocation with ",(0,o.jsx)(n.code,{children:"conda env list"}),", and add ",(0,o.jsx)(n.code,{children:"<conda_environment_path>/bin/python3"})," to your Pyrefly configuration\nunder ",(0,o.jsx)(n.a,{href:"#python-interpreter",children:(0,o.jsx)(n.code,{children:"python-interpreter"})})," or pass it in with the ",(0,o.jsx)(n.code,{children:"--python-interpreter"})," flag."]}),"\n",(0,o.jsx)(n.h2,{id:"example-configurations",children:"Example Configurations"}),"\n",(0,o.jsx)(n.p,{children:"This section displays an example config showing the usage of all config options listed above to make creating\nyour own easier, and to give you an easy place to start."}),"\n",(0,o.jsxs)(n.h3,{id:"default-pyreflytoml",children:["Default ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})]}),"\n",(0,o.jsx)(n.p,{children:"This is a configuration with the Pyrefly defaults. If you have an\ninterpreter installed, some of these values may be overridden."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'###### configuring what to type check and where to import from\n\n# check all files in "."\nproject-includes = ["."]\n# exclude dotfiles\nproject-excludes = ["**/.[!/.]*", "**/*venv/**"]\n# perform an upward search for `.gitignore`, `.ignore`, and `.git/info/exclude`, and\n# add those to `project-excludes` automatically\nuse-ignore-files = true\n# import project files from "."\nsearch-path = ["."]\n# let Pyrefly try to guess your search path\ndisable-search-path-heuristics = false\n# do not include any third-party packages (except those provided by an interpreter)\nsite-package-path = []\n\n###### configuring your python environment\n\n# assume we\'re running on linux, regardless of the actual current platform\npython-platform = "linux"\n# assume the Python version we\'re using is 3.13, without querying an interpreter\npython-version = "3.13"\n# is Pyrefly disallowed from querying for an interpreter to automatically determine your\n# `python-platform`, `python-version`, and extra entries to `site-package-path`?\nskip-interpreter-query = false\n# query the default Python interpreter on your system, if installed and `python_platform`,\n# `python-version`, or `site-package-path` are unset.\n# python-interpreter = null # this is commented out because there are no `null` values in TOML\n\n#### configuring your type check settings\n\n# wildcards for which Pyrefly will unconditionally replace the import with `typing.Any`\nreplace-imports-with-any = []\n# wildcards for which Pyrefly will replace the import with `typing.Any` if it can\'t be found\nignore-missing-imports = []\n# should Pyrefly skip type checking if we find a generated file?\nignore-errors-in-generated-code = false\n# should Pyrefly do a check to see if a `<library>-stubs` library also has `<library>` installed?\nignore-missing-source = false\n# what should Pyrefly do when it encounters a function that is untyped?\nuntyped-def-behavior = "check-and-infer-return-type"\n# can Pyrefly recognize ignore directives other than `# pyrefly: ignore` and `# type: ignore`\npermissive-ignores = false\n\n[errors]\n# this is an empty table, meaning all errors are enabled by default\n\n# no `[[sub-config]]` entries are included, since there are none by default\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"example-pyreflytoml",children:["Example ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'project-includes = ["src"]\nproject-excludes = ["**/.[!/.]*", "**/tests"]\nsearch-path = ["src"]\nsite-package-path = ["venv/lib/python3.12/site-packages"]\n\npython-platform = "linux"\npython-version = "3.12"\npython-interpreter = "venv/bin/python3"\n\nreplace-imports-with-any = [\n  "sympy.*",\n  "*.series",\n]\nignore-errors-in-generated-code = true\nignore-missing-source = true\n\n# disable `bad-assignment` and `invalid-argument` for the whole project\n[errors]\nbad-assignment = false\ninvalid-argument = false\n\n[[sub-config]]\n# apply this to `sub/project/tests/file.py`\nmatches = "sub/project/tests/file.py"\n\n# any unittest imports will by typed as `typing.Any`\nreplace-imports-with-any = ["unittest.*"]\n\n[[sub-config]]\n# apply this config to all files in `sub/project`\nmatches = "sub/project/**"\n\n# enable `assert-type` errors in `sub/project`\n[sub-config.errors]\nassert-type = true\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"example-pyprojecttoml",children:["Example ",(0,o.jsx)(n.code,{children:"pyproject.toml"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'...\n\n# Pyrefly header\n[tool.pyrefly]\n\n#### configuring what to type check and where to import from\nproject-includes = ["src"]\nproject-excludes = ["**/.[!/.]*", "**/tests"]\nsearch-path = ["src"]\nsite-package-path = ["venv/lib/python3.12/site-packages"]\n\n#### configuring your python environment\npython-platform = "linux"\npython-version = "3.12"\npython-interpreter = "venv/bin/python3"\n\n#### configuring your type check settings\nreplace-imports-with-any = [\n  "sympy.*",\n  "*.series",\n]\n\nignore-errors-in-generated-code = true\nignore-missing-source = true\n\n[tool.pyrefly.errors]\nbad-assignment = false\ninvalid-argument = false\n\n[[tool.pyrefly.sub-config]]\n# apply this config to all files in `sub/project`\nmatches = "sub/project/**"\n\n# enable `assert-type` errors in `sub/project`\n[tool.pyrefly.sub-config.errors]\nassert-type = true\n\n[[tool.pyrefly.sub-config]]\n# apply this config to all files in `sub`\nmatches = "sub/**`\n\n# disable `assert-type` errors in `sub/project`\n[tool.pyrefly.sub-config.errors]\nassert-type = false\n\n# other non-Pyrefly configs\n...\n'})})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);