"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[7632],{27632:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"installation","title":"Installation","description":"How to install Pyrefly","source":"@site/docs/installation.mdx","sourceDirName":".","slug":"/installation","permalink":"/en/docs/installation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/installation.mdx","tags":[],"version":"current","frontMatter":{"title":"Installation","description":"How to install Pyrefly"},"sidebar":"docsSidebar","previous":{"title":"Typing Features and PEPS","permalink":"/en/docs/python-features-and-peps"},"next":{"title":"Configuration","permalink":"/en/docs/configuration"}}');var i=r(74848),o=r(28453),l=r(65537),s=r(79329);const a={title:"Installation",description:"How to install Pyrefly"},c=void 0,d={},u=[{value:"Install",id:"install",level:2},{value:"Configure",id:"configure",level:2},{value:"Upgrading Pyrefly",id:"upgrading-pyrefly",level:2},{value:"Add Pyrefly to CI",id:"add-pyrefly-to-ci",level:2},{value:"A few notes about this setup:",id:"a-few-notes-about-this-setup",level:3},{value:"Pre-commit",id:"pre-commit",level:2},{value:"Install pre-commit",id:"install-pre-commit",level:3},{value:"Testing the hook",id:"testing-the-hook",level:3},{value:"How this helps your project",id:"how-this-helps-your-project",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Pyrefly is available on ",(0,i.jsx)(n.a,{href:"https://pypi.org/project/pyrefly/",children:"PyPI"})," with a new release every Monday. We often release more frequently when shipping new features and bug fixes."]}),"\n",(0,i.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"uv"}),", ",(0,i.jsx)(n.code,{children:"poetry"}),", ",(0,i.jsx)(n.code,{children:"pip"}),", ",(0,i.jsx)(n.code,{children:"pixi"})," or ",(0,i.jsx)(n.code,{children:"conda"})," to install Pyrefly. The following commands show you how to install Pyrefly and run 2 basic commands: ",(0,i.jsx)(n.code,{children:"init"})," and ",(0,i.jsx)(n.code,{children:"check"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pyrefly init"})," will update your ",(0,i.jsx)(n.code,{children:"pyproject.toml"})," file (or create a ",(0,i.jsx)(n.code,{children:"pyrefly.toml"})," file) in your project directory, including some basic configuration. It will also attempt to ",(0,i.jsx)(n.a,{href:"../migrating-to-pyrefly",children:"migrate"})," your existing type checker configuration."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pyrefly check --summarize-errors"})," will run the Pyrefly type checker on your project, providing a list of type errors and a summary of error types. The ",(0,i.jsx)(n.code,{children:"--summarize-errors"})," flag is optional, remove it if you don't want summary stats."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pyrefly check --suppress-errors"})," will mark all existing errors as ignored, allowing you to start with a clean check."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Simply ",(0,i.jsx)(n.code,{children:"cd"})," into your project directory and run:"]}),"\n","\n",(0,i.jsxs)(l.default,{children:[(0,i.jsx)(s.default,{value:"pip",label:"Pip",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"pip install pyrefly\npyrefly init\npyrefly check --summarize-errors\n"})})}),(0,i.jsx)(s.default,{value:"conda",label:"Conda",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"conda install -c conda-forge pyrefly\npyrefly init\npyrefly check --summarize-errors\n"})})}),(0,i.jsx)(s.default,{value:"uv",label:"UV",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"uvx pyrefly init\nuvx pyrefly check --summarize-errors\n"})})}),(0,i.jsx)(s.default,{value:"poetry",label:"Poetry",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"poetry add --group dev pyrefly\npoetry run pyrefly init\npoetry run pyrefly check --summarize-errors\n"})})}),(0,i.jsx)(s.default,{value:"pixi",label:"Pixi",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"pixi add pyrefly\npixi run pyrefly init\npixi run pyrefly check --summarize-errors\n"})})})]}),"\n",(0,i.jsx)(n.h2,{id:"configure",children:"Configure"}),"\n",(0,i.jsxs)(n.p,{children:["You can set up a basic configuration file to type-check your project. You can add configuration options to a ",(0,i.jsx)(n.code,{children:"pyproject.toml"})," file or create a ",(0,i.jsx)(n.code,{children:"pyrefly.toml"})," file in your project directory. All ",(0,i.jsx)(n.a,{href:"../configuration",children:"configuration options are documented here"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'[tool.pyrefly]\nsearch_path = [\n    "example_directory/..."\n]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Then, run ",(0,i.jsx)(n.code,{children:"pyrefly check"})," again, and the tool will use your configuration options."]}),"\n",(0,i.jsx)(n.p,{children:"The tool may return a list of type errors; this is perfectly normal. You have a few options at this point:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"# pyrefly: ignore"})," comments to silence the errors. This will get your project to a clean type-checking state, and you can reduce the number of errors as you go. We've included a script that can do this for you:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"pyrefly check --suppress-errors\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Use extra configuration options to silence specific categories of errors or exclude files with more errors than average."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"upgrading-pyrefly",children:"Upgrading Pyrefly"}),"\n",(0,i.jsx)(n.p,{children:"Upgrading the version of Pyrefly you're using or a third-party library you depend on can reveal new type errors in your code. Fixing them all at once is often unrealistic. We've written scripts to help you temporarily silence them."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Step 1\npyrefly check --suppress-errors\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Step 2\n<run your formatter of choice>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Step 3\npyrefly check --remove-unused-ignores\n"})}),"\n",(0,i.jsx)(n.p,{children:"Repeat these steps until you achieve a clean formatting run and a clean type check."}),"\n",(0,i.jsxs)(n.p,{children:["This will add ",(0,i.jsx)(n.code,{children:"# pyrefly: ignore"})," comments to your code, enabling you to silence errors and return to fix them later. This can make the process of upgrading a large codebase much more manageable."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"add-pyrefly-to-ci",children:"Add Pyrefly to CI"}),"\n",(0,i.jsx)(n.p,{children:"After your project passes type checks without errors, you can prevent new bugs from being introduced. Enforce this through CI (Continuous Integration) to prevent other maintainers from merging code with errors. Here is an example for GitHub."}),"\n",(0,i.jsx)(n.p,{children:"Save your workflow in the following path within your repository:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:".github/workflows/typecheck.yml\n"})}),"\n",(0,i.jsxs)(n.p,{children:["GitHub automatically detects ",(0,i.jsx)(n.code,{children:".yml"})," files within ",(0,i.jsx)(n.code,{children:".github/workflows/"})," and sets up the defined workflows."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"name: Pyrefly Type Check\n\non:\n  pull_request:\n    branches: [main]\n  workflow_dispatch:  # Allows manual triggering from the GitHub UI\n\njobs:\n  typecheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n\n      # Install Python dependencies and create environment\n      - name: Install dependencies and run type checking\n        run: |\n          python -m venv .venv\n          source .venv/bin/activate\n          python -m pip install --upgrade pip\n          # Install your dependencies; adjust the following lines as needed\n          pip install -r requirements-dev.txt\n\n      - name: Install Pyrefly\n        run: pip install pyrefly\n\n      - name: Run Pyrefly Type Checker\n        run: pyrefly check\n"})}),"\n",(0,i.jsx)(n.h3,{id:"a-few-notes-about-this-setup",children:"A few notes about this setup:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Building your environment and installing dependencies will enhance type safety by checking the types of imports. ",(0,i.jsx)(n.em,{children:"This is not required, but encouraged!"})]}),"\n",(0,i.jsxs)(n.li,{children:["Simply drop in ",(0,i.jsx)(n.code,{children:"pyrefly check"})," to existing workflows that build and test your environment."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"      - name: Run Pyrefly Type Checker\n        run: pyrefly check\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Your ",(0,i.jsx)(n.code,{children:"pyrefly.toml"})," or Pyrefly configs in your ",(0,i.jsx)(n.code,{children:"pyproject.toml"})," will be automatically detected. Learn how to ",(0,i.jsx)(n.a,{href:"../configuration",children:"configure Pyrefly here"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"pre-commit",children:"Pre-commit"}),"\n",(0,i.jsxs)(n.p,{children:["Pyrefly provides a ",(0,i.jsx)(n.a,{href:"https://pre-commit.com/",children:"pre-commit hook"})," so you can automatically type check files before they are committed."]}),"\n",(0,i.jsxs)(n.p,{children:["We maintain a dedicated repository for this integration here: ",(0,i.jsx)(n.a,{href:"https://github.com/facebook/pyrefly-pre-commit",children:"facebook/pyrefly-pre-commit"})]}),"\n",(0,i.jsx)(n.p,{children:"That repository contains:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Two pre-commit hooks depending on your setup"}),"\n",(0,i.jsx)(n.li,{children:"Installation instructions"}),"\n",(0,i.jsx)(n.li,{children:"Example configuration snippets for your project and CI"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To get started, follow the setup steps in the repo\u2019s ",(0,i.jsx)(n.a,{href:"https://github.com/facebook/pyrefly-pre-commit#readme",children:"README"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"install-pre-commit",children:"Install pre-commit"}),"\n",(0,i.jsxs)(n.p,{children:["You only need to do this once per clone. You can also include this in your as script or in your build/setup commands like ",(0,i.jsx)(n.code,{children:"setup.py"})," or ",(0,i.jsx)(n.code,{children:"setup.cfg"})," so it's installed for everyone."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 1. Once per clone\npip install pre-commit          # or pipx install pre\u2011commit\npre-commit install              # writes .git/hooks/pre-commit\n\n# 2. Upgrade hooks when you bump versions in YAML\npre-commit autoupdate\n\n# 3. Manual full run (good before the first push or when you add the hook)\npre-commit run --all-files\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testing-the-hook",children:"Testing the hook"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Introduce a cheap error"})}),"\n",(0,i.jsxs)(n.p,{children:["Edit any ",(0,i.jsx)(n.code,{children:".py"})," file and deliberately return ",(0,i.jsx)(n.code,{children:"None"})," where the function is annotated to return ",(0,i.jsx)(n.code,{children:"int"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def foo() -> int:\n    return None\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Stage & commit"})}),"\n",(0,i.jsx)(n.p,{children:"Output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'git add test.py\ngit commit -m "test: pre\u2011commit hook check"\npyrefly check............................................................Failed\n- hook id: pyrefly-typecheck-system\n- exit code: 1\n\n INFO Checking project configured at `/myproject/pyrefly.toml`\nERROR /myproject/test.py:2:12-16: Returned type `None` is not assignable to declared return type `int` [bad-return]\n'})}),"\n",(0,i.jsx)(n.p,{children:"You should see Pyrefly fail as above, preventing the commit from being created."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Fix & recommit"})}),"\n",(0,i.jsxs)(n.p,{children:["Correct the code, ",(0,i.jsx)(n.code,{children:"git add"})," it again, and re\u2011run ",(0,i.jsx)(n.code,{children:"git commit"}),"; this time the hook passes."]}),"\n",(0,i.jsx)(n.h3,{id:"how-this-helps-your-project",children:"How this helps your project"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Earlier feedback"}),": Developers see type mistakes immediately, not minutes later in CI."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistent enforcement"}),": Every commit\u2014local or on CI\u2014runs the same pyrefly check command."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clean history"}),': Because Pyrefly checks before the commit object is created, you avoid "fix type error" fix\u2011up commits.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Culture of quality"}),": Blocking problems at the doorstep raises the baseline for new contributors."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},65537:(e,n,r)=>{r.r(n),r.d(n,{default:()=>w});var t=r(96540),i=r(18215),o=r(65627),l=r(22195),s=r(50372),a=r(30604),c=r(11861),d=r(78749);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:i}}=e;return{value:n,label:r,attributes:t,default:i}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function y(e){let{queryString:n=!1,groupId:r}=e;const i=(0,l.W6)(),o=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,a.aZ)(o),(0,t.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(i.location.search);n.set(o,e),i.replace({...i.location,search:n.toString()})}),[o,i])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,o=h(e),[l,a]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[c,u]=y({queryString:r,groupId:i}),[f,m]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,o]=(0,d.Dv)(r);return[i,(0,t.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:i}),x=(()=>{const e=c??f;return p({value:e,tabValues:o})?e:null})();(0,s.A)((()=>{x&&a(x)}),[x]);return{selectedValue:l,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);a(e),u(e),m(e)}),[u,m,o]),tabValues:o}}var m=r(9136);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=r(74848);function g(e){let{className:n,block:r,selectedValue:t,selectValue:l,tabValues:s}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const n=e.currentTarget,r=a.indexOf(n),i=s[r].value;i!==t&&(c(n),l(i))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:s.map((e=>{let{value:n,label:r,attributes:o}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{a.push(e)},onKeyDown:u,onClick:d,...o,className:(0,i.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function b(e){let{lazy:n,children:r,selectedValue:o}=e;const l=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function v(e){const n=f(e);return(0,j.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,j.jsx)(g,{...n,...e}),(0,j.jsx)(b,{...n,...e})]})}function w(e){const n=(0,m.default)();return(0,j.jsx)(v,{...e,children:u(e.children)},String(n))}},79329:(e,n,r)=>{r.r(n),r.d(n,{default:()=>l});r(96540);var t=r(18215);const i={tabItem:"tabItem_Ymn6"};var o=r(74848);function l(e){let{children:n,hidden:r,className:l}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,l),hidden:r,children:n})}}}]);