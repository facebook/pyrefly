"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[2521],{12521:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"migrating-from-mypy","title":"Migrating from Mypy","description":"How to switch your type checker configuration from Mypy to Pyrefly","source":"@site/docs/migrating-from-mypy.mdx","sourceDirName":".","slug":"/migrating-from-mypy","permalink":"/en/docs/migrating-from-mypy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/migrating-from-mypy.mdx","tags":[],"version":"current","frontMatter":{"title":"Migrating from Mypy","description":"How to switch your type checker configuration from Mypy to Pyrefly"},"sidebar":"docsSidebar","previous":{"title":"Migration Guides","permalink":"/en/docs/migrating-to-pyrefly"},"next":{"title":"Migrating from Pyright","permalink":"/en/docs/migrating-from-pyright"}}');var o=n(74848),s=n(28453);const t={title:"Migrating from Mypy",description:"How to switch your type checker configuration from Mypy to Pyrefly"},l=void 0,d={},c=[{value:"Running Pyrefly",id:"running-pyrefly",level:2},{value:"Mypy Config Migration",id:"mypy-config-migration",level:2},{value:"Config options",id:"config-options",level:3},{value:"Config Migration Details",id:"config-migration-details",level:3},{value:"Mypy Error Codes and Pyrefly Error Kinds",id:"mypy-error-codes-and-pyrefly-error-kinds",level:3},{value:"Per-Module configs",id:"per-module-configs",level:3},{value:"Silencing Errors",id:"silencing-errors",level:2},{value:"Error Kind Mapping",id:"error-kind-mapping",level:3}];function a(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"running-pyrefly",children:"Running Pyrefly"}),"\n",(0,o.jsx)(r.p,{children:"Like mypy, pyrefly can be given a list of files to check:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-sh",children:"$ pyrefly check file1.py file2.py\n"})}),"\n",(0,o.jsx)(r.p,{children:"The easiest way to run pyrefly on all files in a project is to run it from the project root:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-sh",children:"$ cd your/project\n$ pyrefly check\n"})}),"\n",(0,o.jsx)(r.p,{children:"Pyrefly is designed to have sensible defaults, and you may not need to configure it at all.\nHowever, projects with existing mypy configs may want to configure pyrefly to suit their own needs."}),"\n",(0,o.jsx)(r.h2,{id:"mypy-config-migration",children:"Mypy Config Migration"}),"\n",(0,o.jsx)(r.p,{children:"To make it as easy as possible to get started with pyrefly, we've provided a script for automatically migrating a mypy config to pyrefly."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-sh",children:"$ pyrefly init path/to/your/project\n"})}),"\n",(0,o.jsxs)(r.p,{children:["This will search for an existing ",(0,o.jsx)(r.code,{children:"mypy.ini"})," or ",(0,o.jsx)(r.code,{children:"pyproject.toml"})," with a ",(0,o.jsx)(r.code,{children:"tool.mypy"})," section, and then transform it into a ",(0,o.jsx)(r.code,{children:"pyrefly.toml"})," (or ",(0,o.jsx)(r.code,{children:"[tool.pyrefly]"})," section) while preserving as many options as possible. See ",(0,o.jsx)(r.code,{children:"init --help"})," for more options."]}),"\n",(0,o.jsx)(r.p,{children:"We do recommend checking the resulting config for errors. While there is some overlap between mypy's config options and pyrefly's config options, it's not always possible to cleanly translate one config option to another."}),"\n",(0,o.jsxs)(r.p,{children:["If you'd rather start fresh with a hand-written config, please see the ",(0,o.jsx)(r.a,{href:"/en/docs/configuration",children:"pyrefly configuration docs"}),".\nIf you run into any issues with config migration, please ",(0,o.jsx)(r.a,{href:"https://github.com/facebook/pyrefly/issues",children:"let us know"}),"!"]}),"\n",(0,o.jsx)(r.h3,{id:"config-options",children:"Config options"}),"\n",(0,o.jsx)(r.p,{children:"The following config options make Pyrefly behave more like Mypy:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-toml",children:'# By default, mypy does not check unannotated function bodies. The following flag will configure Pyrefly to match mypy\'s behavior:\nuntyped_def_behavior = "skip-and-infer-return-any"\n'})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-toml",children:'# If mypy is configured with `--check-untyped-defs` or `--strict` it will check function bodies where the function signature is unannotated.\n# The following flag will enable this behavior:\nuntyped_def_behavior = "check-and-infer-return-any"\n'})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-toml",children:"# Direct Pyrefly to respect `# mypy: ignore` and `# mypy: ignore-errors` comments\npermissive-ignores = true\n"})}),"\n",(0,o.jsx)(r.h3,{id:"config-migration-details",children:"Config Migration Details"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"files"}),", ",(0,o.jsx)(r.code,{children:"modules"}),", and ",(0,o.jsx)(r.code,{children:"packages"})," are combined into ",(0,o.jsx)(r.code,{children:"project_includes"}),". This should work exactly the same for ",(0,o.jsx)(r.code,{children:"files"})," and ",(0,o.jsx)(r.code,{children:"packages"}),". Mypy doesn't recurse into ",(0,o.jsx)(r.code,{children:"modules"}),", but pyrefly will."]}),"\n",(0,o.jsxs)(r.p,{children:["Pyrefly makes an effort to transform the ",(0,o.jsx)(r.code,{children:"exclude"})," regex into a list of filepath globs for ",(0,o.jsx)(r.code,{children:"project_excludes"}),". This should excel on simple regexes, such as ",(0,o.jsx)(r.code,{children:"some/file.py|exclude_dir/"}),", which becomes ",(0,o.jsx)(r.code,{children:'["**/some/file.py", "**/exclude_dir/"]'}),"."]}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"ignore_missing_imports"})," per-module config option is turned into a list of modules. For example:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ini",children:"[mypy-some.*.module]\nignore_missing_imports = True\n"})}),"\n",(0,o.jsx)(r.p,{children:"Becomes:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-toml",children:'replace_imports_with_any = ["some.*.module"]\n'})}),"\n",(0,o.jsxs)(r.p,{children:["Mypy's ",(0,o.jsx)(r.code,{children:'follow_imports = "skip"'})," is handled the same way."]}),"\n",(0,o.jsxs)(r.p,{children:["Pyrefly does support mypy's ",(0,o.jsx)(r.a,{href:"https://mypy.readthedocs.io/en/stable/config_file.html#config-file-format",children:"module name pattern syntax"}),": see ",(0,o.jsx)(r.a,{href:"/en/docs/configuration#module-globbing",children:"Module Globbing"})," in the configuration docs."]}),"\n",(0,o.jsxs)(r.p,{children:["Mypy's ",(0,o.jsx)(r.code,{children:"follow_untyped_imports"})," option is allowed to be global or per-module. The pyrefly equivalent, ",(0,o.jsx)(r.code,{children:"use_untyped_imports"}),", is only global. This setting defaults to ",(0,o.jsx)(r.code,{children:"true"})," unless\nthe ",(0,o.jsx)(r.code,{children:"follow_untyped_imports"})," is disabled in the ",(0,o.jsx)(r.code,{children:"[mypy]"})," section of the migrated config."]}),"\n",(0,o.jsx)(r.h3,{id:"mypy-error-codes-and-pyrefly-error-kinds",children:"Mypy Error Codes and Pyrefly Error Kinds"}),"\n",(0,o.jsxs)(r.p,{children:["Pyrefly maps Mypy's ",(0,o.jsx)(r.a,{href:"https://mypy.readthedocs.io/en/stable/error_code_list.html",children:"error codes"})," to equivalent pyrefly ",(0,o.jsx)(r.a,{href:"/en/docs/error-kinds",children:"error kinds"}),".\nWhile not every error code has an equivalent error kind, we make an effort to ensure that pyrefly suppresses the same errors that mypy does."]}),"\n",(0,o.jsxs)(r.p,{children:["This may lead to overly broad error suppressions, and you may want to consider removing some error kinds from the disable list.\nYou can also use a ",(0,o.jsx)(r.a,{href:"/en/docs/configuration#sub_config",children:"SubConfig"})," to selectively silence errors in specific files,\nor see ",(0,o.jsx)(r.a,{href:"#silencing-errors",children:"Silencing Errors"})," for how to suppress errors at the source."]}),"\n",(0,o.jsxs)(r.p,{children:["See ",(0,o.jsx)(r.a,{href:"#error-kind-mapping",children:"Error Kind Mapping"})," for a table showing the relationship between type check diagnostic settings and error kinds."]}),"\n",(0,o.jsx)(r.h3,{id:"per-module-configs",children:"Per-Module configs"}),"\n",(0,o.jsxs)(r.p,{children:["Mypy's per-module configs let you change a wide range of configuration options for modules matching a module wildcard.\nPyrefly's ",(0,o.jsx)(r.a,{href:"/en/docs/configuration#sub_config",children:"SubConfigs"})," are a similar mechanism that let you configure pyrefly's behavior for files matching a filepath glob.\nHowever, they support significantly fewer options, and only ",(0,o.jsx)(r.code,{children:"disable_error_code"})," and ",(0,o.jsx)(r.code,{children:"enable_error_code"})," will be migrated over to the pyrefly config."]}),"\n",(0,o.jsx)(r.h2,{id:"silencing-errors",children:"Silencing Errors"}),"\n",(0,o.jsxs)(r.p,{children:["Like mypy, pyrefly has ways to silence specific error codes. Full details can be found in the ",(0,o.jsx)(r.a,{href:"/en/docs/error-suppressions",children:"Error Suppression docs"})]}),"\n",(0,o.jsx)(r.p,{children:"To silence an error on a specific line, add a disable comment above that line. You can either suppress all errors on that line:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"# pyrefly: ignore\nx: str = 1\n"})}),"\n",(0,o.jsx)(r.p,{children:"Or target a specific error type:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"# pyrefly: ignore[bad-assignment]\nx: str = 1\n"})}),"\n",(0,o.jsx)(r.p,{children:"To suppress all instances of an error, disable that error in the config:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"[errors]\nimport-error = false\n"})}),"\n",(0,o.jsxs)(r.p,{children:["This is equivalent to mypy's ",(0,o.jsx)(r.code,{children:"disable_error_code"}),", though of course the ",(0,o.jsx)(r.a,{href:"/en/docs/error-kinds",children:"error codes"})," are different!"]}),"\n",(0,o.jsx)(r.h3,{id:"error-kind-mapping",children:"Error Kind Mapping"}),"\n",(0,o.jsxs)(r.p,{children:["This table shows the mapping between mypy's ",(0,o.jsx)(r.a,{href:"https://mypy.readthedocs.io/en/stable/error_code_list.html",children:"error codes"})," and pyrefly's ",(0,o.jsx)(r.a,{href:"/en/docs/error-kinds",children:"error kinds"}),"."]}),"\n",(0,o.jsx)(r.p,{children:"This table will be expanded as more diagnostics are supported."}),"\n",(0,o.jsxs)(r.table,{children:[(0,o.jsx)(r.thead,{children:(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.th,{children:"Mypy"}),(0,o.jsx)(r.th,{children:"Pyrefly"})]})}),(0,o.jsxs)(r.tbody,{children:[(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"attr-defined"}),(0,o.jsx)(r.td,{children:"missing-attribute"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:"union-attr"}),(0,o.jsx)(r.td,{children:"missing-attribute"})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);