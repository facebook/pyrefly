"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[1693],{1693:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"IDE","title":"IDE Installation","description":"How to add Pyrefly Language Server and Typechecking to your IDE","source":"@site/docs/IDE.mdx","sourceDirName":".","slug":"/IDE","permalink":"/en/docs/IDE","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/IDE.mdx","tags":[],"version":"current","frontMatter":{"title":"IDE Installation","description":"How to add Pyrefly Language Server and Typechecking to your IDE"},"sidebar":"docsSidebar","previous":{"title":"Migrating from Pyright","permalink":"/en/docs/migrating-from-pyright"},"next":{"title":"Supported Features","permalink":"/en/docs/IDE-features"}}');var o=i(74848),r=i(28453);const l={title:"IDE Installation",description:"How to add Pyrefly Language Server and Typechecking to your IDE"},t="Add Pyrefly to your IDE",a={},c=[{value:"Quick start",id:"quick-start",level:2},{value:"Customization",id:"customization",level:2},{value:"Issues?",id:"issues",level:2},{value:"Other Editors",id:"other-editors",level:2},{value:"Cursor and Windsurf",id:"cursor-and-windsurf",level:3},{value:"Jetbrains / Pycharm",id:"jetbrains--pycharm",level:3},{value:"Neovim",id:"neovim",level:3},{value:"Vim/Neovim + coc.nvim",id:"vimneovim--cocnvim",level:3},{value:"Vim + ALE",id:"vim--ale",level:3},{value:"Emacs",id:"emacs",level:3},{value:"Helix",id:"helix",level:3},{value:"Sublime",id:"sublime",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"add-pyrefly-to-your-ide",children:"Add Pyrefly to your IDE"})}),"\n",(0,o.jsxs)(n.p,{children:["Pyrefly seamlessly integrates into IDEs with our ",(0,o.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=meta.pyrefly",children:"VSCode"})," and ",(0,o.jsx)(n.a,{href:"https://open-vsx.org/extension/meta/pyrefly",children:"OpenVSX"})," extensions. For other editors like vim/emacs, see ",(0,o.jsx)(n.a,{href:"#other-editors",children:"other editors"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["To see what features are supported by the IDE extension, see the ",(0,o.jsx)(n.a,{href:"../IDE-features",children:"Supported Features page"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Install the Pyrefly extension from the ",(0,o.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=meta.pyrefly",children:"VS Code Marketplace"})," or ",(0,o.jsx)(n.a,{href:"https://open-vsx.org/extension/meta/pyrefly",children:"Open VSX"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Open any Python file and the extension will activate automatically."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,o.jsxs)(n.p,{children:["By default, Pyrefly should work in the IDE with no configuration necessary. But to ensure your project is set up properly, see ",(0,o.jsx)(n.a,{href:"../configuration",children:"configurations"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The following configuration options are IDE-specific and exposed as VSCode settings:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Disable language services","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"python.pyrefly.disableLanguageServices"})," [boolean: false]: By default, Pyrefly will provide both type errors and other language features like go-to definition, intellisense, hover, etc. Set ",(0,o.jsx)(n.code,{children:"disableLanguageServices"})," to ",(0,o.jsx)(n.code,{children:"true"})," to keep type errors from Pyrefly unchanged but use VSCode's Python extension for everything else."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Disable type errors","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"python.pyrefly.displayTypeErrors"})," [string: 'default']: If ",(0,o.jsx)(n.code,{children:"'default'"}),", Pyrefly will only provide type check squiggles in the IDE if your file is covered by a ",(0,o.jsx)(n.a,{href:"../configuration",children:"Pyrefly configuration"}),". If ",(0,o.jsx)(n.code,{children:"'force-off'"}),", Pyrefly will never provide type check squiggles in the IDE. If ",(0,o.jsx)(n.code,{children:"'force-on'"}),", Pyrefly will always provide type check squiggles in the IDE."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Specify a custom Pyrefly Binary (lspPath)","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"pyrefly.lspPath"})," [string: '']: If your platform is not supported, you can build pyrefly from source and specify the binary path with the ",(0,o.jsx)(n.code,{children:"lspPath"})," config."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Use a specific interpreter","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["If the ",(0,o.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=ms-python.python",children:(0,o.jsx)(n.code,{children:"Python"})})," VSCode extension is installed, ",(0,o.jsx)(n.a,{href:"https://code.visualstudio.com/docs/python/environments",children:"selecting an interpreter"})," will override the interpreter and settings Pyrefly uses to type check your project, even if one is specified in your Pyrefly configuration."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"python.defaultInterpreterPath"})," will override the default interpreter selected by VSCode for your workspace."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"issues",children:"Issues?"}),"\n",(0,o.jsxs)(n.p,{children:["If you experience issues with the Pyrefly extension, please create an ",(0,o.jsx)(n.a,{href:"https://github.com/facebook/pyrefly/issues",children:"issue"})," on github."]}),"\n",(0,o.jsx)(n.h2,{id:"other-editors",children:"Other Editors"}),"\n",(0,o.jsx)(n.p,{children:"Support for other editors is community-driven. If you would like to set this up, please contribute."}),"\n",(0,o.jsx)(n.h3,{id:"cursor-and-windsurf",children:"Cursor and Windsurf"}),"\n",(0,o.jsxs)(n.p,{children:["You can use Pyrefly in your favorite AI Editor that supports ",(0,o.jsx)(n.a,{href:"https://open-vsx.org/extension/meta/pyrefly",children:"OpenVSX"}),' extensions. Search for "Pyrefly" in the extension marketplace and install it. Similar to VSCode, Pyrefly will automatically activate when you open a Python file.\nYou will want to disable the other Python language server either by disabling it in the extension settings "Language Server: None" or by disabling the Pyright or BasedPyright extensions.']}),"\n",(0,o.jsx)("video",{src:"/videos/openvsx.mp4",width:"720",muted:!0,loop:!0,autoPlay:!0,playsInline:!0,preload:"metadata"}),"\n",(0,o.jsx)(n.h3,{id:"jetbrains--pycharm",children:"Jetbrains / Pycharm"}),"\n",(0,o.jsxs)(n.p,{children:["An unofficial Jetbrains extension has been developed ",(0,o.jsx)(n.a,{href:"https://plugins.jetbrains.com/plugin/26829-pyrefly",children:"here"})]}),"\n",(0,o.jsx)(n.h3,{id:"neovim",children:"Neovim"}),"\n",(0,o.jsxs)(n.p,{children:["Pyrefly supports native Neovim support through ",(0,o.jsx)(n.code,{children:"lspconfig"})," on Neovim 0.11+. Install and setup Pyrefly using the settings below."]}),"\n",(0,o.jsxs)(n.p,{children:["The recommended way to set up Pyrefly in ",(0,o.jsx)(n.strong,{children:"Neovim 0.11+"})," is:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Install or update the ",(0,o.jsx)(n.a,{href:"https://github.com/neovim/nvim-lspconfig",children:(0,o.jsx)(n.code,{children:"neovim/nvim-lspconfig"})}),", ",(0,o.jsx)(n.a,{href:"https://github.com/mason-org/mason.nvim",children:(0,o.jsx)(n.code,{children:"mason-org/mason.nvim"})}),", and ",(0,o.jsx)(n.a,{href:"https://github.com/mason-org/mason-lspconfig.nvim",children:(0,o.jsx)(n.code,{children:"mason-org/mason-lspconfig.nvim"})})," plugins with your plugin manager of choice."]}),"\n",(0,o.jsxs)(n.li,{children:["Add the following to your Neovim ",(0,o.jsx)(n.code,{children:"init.lua"}),":"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'require("mason").setup()\nrequire("mason-lspconfig").setup()\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsxs)(n.li,{children:["In Neovim, run ",(0,o.jsx)(n.code,{children:":MasonInstall pyrefly"})," or add ",(0,o.jsx)(n.code,{children:"pyrefly"})," to your ",(0,o.jsx)(n.code,{children:"ensure_installed"})," options:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'require("mason-lspconfig").setup {\n  ensure_installed = { "pyrefly" },\n}\n'})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Alternative setups and configurations"}),(0,o.jsx)(n.p,{children:"While the above section describes the fastest way to set up Pyrefly, you may already have a setup or prefer to use other approaches for your lspconfig. Below we describe alternatives to both Pyrefly installation and configuration."}),(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["We don't provide instructions for setting up Neovim with versions prior to Neovim 0.11, though Pyrefly can work with them through ",(0,o.jsx)(n.a,{href:"https://github.com/neovim/nvim-lspconfig",children:(0,o.jsx)(n.code,{children:"neovim/nvim-lspconfig"})}),"."]})}),(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Install Pyrefly for Neovim"}),(0,o.jsx)(n.p,{children:"There are two methods we currently support for installing Pyrefly for Neovim:"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["(recommended) Install the ",(0,o.jsx)(n.code,{children:"mason-org/mason.nvim"})," plugin, which handles installing language services and configuring them easily."]}),"\n",(0,o.jsx)(n.li,{children:"Use a system installation."}),"\n"]}),(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"mason.nvim"}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/mason-org/mason.nvim",children:"mason.nvim"})," is our recommended approach, since it makes Pyrefly and other language servers, linters, and utilities easily available to Neovim."]}),(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Installing a binary with Mason will take precedence over other system installations. It might be worth using system installations (including installations in virtual environments) if you need to switch between different versions of Pyrefly for different projects."})}),(0,o.jsx)(n.p,{children:"Install Mason using your Neovim plugin manager of choice, and make sure you call its setup function to make it available."}),(0,o.jsxs)(n.p,{children:["To install Pyrefly, run ",(0,o.jsx)(n.code,{children:":MasonInstall pyrefly"})," in Neovim, and it will be installed! You can install a specific version of Pyrefly with ",(0,o.jsx)(n.code,{children:":MasonInstall pyrefly@<version>"}),", and manage Mason installations (including per-language-server-specific settings!) with ",(0,o.jsx)(n.code,{children:":Mason"}),"."]})]}),(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"System Installations"}),(0,o.jsxs)(n.p,{children:["Pyrefly can also work with Neovim's ",(0,o.jsx)(n.code,{children:"lspconfig"})," when using a system installation. This will work as long as the Pyrefly binary you want to use is available on your ",(0,o.jsx)(n.code,{children:"$PATH"}),", which you can check by making sure commands like ",(0,o.jsx)(n.code,{children:"pyrefly --help"})," succeed. If an installation is available on your ",(0,o.jsx)(n.code,{children:"$PATH"}),", continue on to ",(0,o.jsx)(n.a,{href:"#configure-pyrefly-for-neovim",children:"configure"})," below."]}),(0,o.jsxs)(n.p,{children:["To install Pyrefly, you can use the package manager of your choice. We support ",(0,o.jsx)(n.code,{children:"uv"}),", ",(0,o.jsx)(n.code,{children:"pip"}),", ",(0,o.jsx)(n.code,{children:"Cargo"}),", and anything else that can interface with PyPI (see ",(0,o.jsx)(n.a,{href:"/en/docs/installation",children:"Installation"})," for more info)."]}),(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"If you're installing Pyrefly into a virtual environment, please be aware that Pyrefly will only work within Neovim if the virtual environment is activated when you start Neovim."})}),(0,o.jsxs)(n.p,{children:["Before moving on, double check that you can access Pyrefly on your ",(0,o.jsx)(n.code,{children:"$PATH"}),". If you can, then continue with ",(0,o.jsx)(n.a,{href:"#configure-pyrefly-for-neovim",children:"configure"}),"."]}),(0,o.jsxs)(n.p,{children:["If Pyrefly is not available on your ",(0,o.jsx)(n.code,{children:"$PATH"}),", you can try the following:"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["If you're using a virtual environment, try ",(0,o.jsx)(n.code,{children:"source .venv/bin/activate"})," to ensure your venv is running, then see if ",(0,o.jsx)(n.code,{children:"pyrefly"})," is available."]}),"\n",(0,o.jsxs)(n.li,{children:["If you're using ",(0,o.jsx)(n.code,{children:"uv"}),", you can ensure ",(0,o.jsx)(n.code,{children:"uv"}),"-installed tools are available on your path by running ",(0,o.jsx)(n.code,{children:"uv tool update-shell"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Configure ",(0,o.jsx)(n.code,{children:"lspconfig"})," to use a specific executable/command by updating your Pyrefly-specific lspconfig settings. To do this, override the ",(0,o.jsx)(n.code,{children:"cmd"})," configuration option with your command in the configuration section below."]}),"\n"]})]})]}),(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:" Configure Pyrefly for Neovim"}),(0,o.jsx)(n.p,{children:"This section describes how to tell Neovim how Pyrefly can be run, as well as how to override those settings."}),(0,o.jsx)(n.p,{children:"You have two options on how to do this:"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["(recommended) Install or update the ",(0,o.jsx)(n.a,{href:"https://github.com/neovim/nvim-lspconfig",children:(0,o.jsx)(n.code,{children:"neovim/nvim-lspconfig"})})," plugin to get Pyrefly's (and other language servers') default configs. You can override specific settings if you'd like."]}),"\n",(0,o.jsx)(n.li,{children:"Setup your language server manually without installing extra plugins."}),"\n"]}),(0,o.jsxs)(i,{children:[(0,o.jsxs)("summary",{children:["Configs with ",(0,o.jsx)(n.code,{children:"neovim/nvim-lspconfig"})," plugin"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/neovim/nvim-lspconfig",children:(0,o.jsx)(n.code,{children:"neovim/nvim-lspconfig"})})," is a Neovim plugin acting as a repository of language server settings (a repository of language server settings) installed and updated to get Pyrefly's default configuration."]}),(0,o.jsxs)(n.p,{children:["We also recommend installing or updating the ",(0,o.jsx)(n.a,{href:"https://github.com/mason-org/mason-lspconfig.nvim",children:"mason-org/mason-lspconfig.nvim"})," plugin if you're using Mason, which provides other nice functionality when using Mason with ",(0,o.jsx)(n.code,{children:"lspconfig"}),". If you install ",(0,o.jsx)(n.code,{children:"mason-org/mason-lspconfig.nvim"}),", be sure to source it in your Neovim config."]}),(0,o.jsxs)(n.p,{children:["To override specific settings, see ",(0,o.jsx)(n.code,{children:":h vim.lsp.config"}),". See ",(0,o.jsx)(n.code,{children:":h vim.lsp.Config"})," and ",(0,o.jsx)(n.code,{children:":h vim.lsp.ClientConfig"})," for values you can override, and the ",(0,o.jsxs)(n.a,{href:"https://github.com/neovim/nvim-lspconfig/blob/master/lsp/pyrefly.lua",children:[(0,o.jsx)(n.code,{children:"nvim-lspconfig"})," Pyrefly config"]})," for default values."]}),(0,o.jsxs)(n.p,{children:["Example overriding ",(0,o.jsx)(n.code,{children:"cmd"})," and ",(0,o.jsx)(n.code,{children:"filetypes"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"vim.lsp.config('pyrefly', {\n    -- example of how to run `uv` installed Pyrefly without adding to your path\n    cmd = { 'uvx', 'pyrefly', 'lsp' }\n})\n"})})]}),(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"No-plugin Configs"}),(0,o.jsxs)(n.p,{children:["You have the option to setup your language server without\n",(0,o.jsx)(n.code,{children:"neovim/nvim-lspconfig"}),". Simply copy/modify the Pyrefly defaults\nfrom\n",(0,o.jsx)(n.a,{href:"https://github.com/neovim/nvim-lspconfig/blob/master/lsp/pyrefly.lua",children:(0,o.jsx)(n.code,{children:"nvim-lspconfig"})}),"\nin a block like below."]}),(0,o.jsxs)(n.p,{children:["**NOTE: This should be in a file under ",(0,o.jsx)(n.code,{children:"nvim/lsp/pyrefly.lua"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'---@type vim.lsp.Config\nreturn {\n  cmd = { "pyrefly", "lsp" },\n}\n'})})]}),(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://youtu.be/IZnhl121yo0?si=VINhYDEySX48_8GY",children:"This Youtube tutorial"})," explains setting up a language server in more depth and with a more organized setup, so check it out if you want to learn more."]})})]}),(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Enable Pyrefly for Neovim"}),(0,o.jsxs)(n.p,{children:["If you've installed Pyrefly with Mason and have ",(0,o.jsx)(n.code,{children:"mason-org/mason-lspconfig.nvim"})," installed, then your language server should just work! You can check by opening a file your language server should cover and running ",(0,o.jsx)(n.code,{children:":checkhealth lsp"})," to see if it's started. You may need to restart Neovim for any changes made above to take effect."]}),(0,o.jsx)(n.p,{children:"Otherwise, to make sure your language servers are activated, be sure to enable them with the syntax below."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'vim.lsp.enable({"pyrefly"})\n'})}),(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If you're using ",(0,o.jsx)(n.code,{children:"init.vim"}),", you can use a ",(0,o.jsx)(n.a,{href:"https://neovim.io/doc/user/lua.html#%3Alua-heredoc",children:"lua heredoc"})," to execute lua and enable your config."]})})]})]}),"\n",(0,o.jsx)(n.h3,{id:"vimneovim--cocnvim",children:"Vim/Neovim + coc.nvim"}),"\n",(0,o.jsxs)(n.p,{children:["Ensure the pyrefly is on ",(0,o.jsx)(n.code,{children:"$PATH"}),", add following snippet to your ",(0,o.jsx)(n.code,{children:"coc-settings.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"languageserver": {\n  "pyrefly": {\n    "command": "pyrefly",\n    "args": ["lsp"],\n    "filetypes": ["python"],\n    "rootPatterns": ["pyrefly.toml", "pyproject.toml", ".git"],\n  }\n},\n'})}),"\n",(0,o.jsx)(n.h3,{id:"vim--ale",children:"Vim + ALE"}),"\n",(0,o.jsx)(n.p,{children:"Pull the latest version of ALE and add the following lines to your configuration\nto enable Pyrefly in Vim with ALE:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"let g:ale_linters = {\n    ...\n  \\ 'python': ['pyrefly'],\n    ...\n  \\ }\n"})}),"\n",(0,o.jsx)(n.h3,{id:"emacs",children:"Emacs"}),"\n",(0,o.jsxs)(n.p,{children:["There are several emacs packages that implement the language server protocol; the ",(0,o.jsx)(n.code,{children:"eglot"})," package\nis built into recent versions of emacs. You can tell ",(0,o.jsx)(n.code,{children:"eglot"})," to use ",(0,o.jsx)(n.code,{children:"pyrefly"})," (which we assume\nis on your ",(0,o.jsx)(n.code,{children:"$PATH"}),") with the following configuration:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'(add-to-list \'eglot-server-programs\n  `((python-ts-mode python-mode) . ("pyrefly" "lsp")))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["If you are using ",(0,o.jsx)(n.code,{children:"use-package"}),", this command would run inside of the ",(0,o.jsx)(n.code,{children:":config"})," block; a minimal\nexample would look like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'(use-package eglot\n  :ensure t\n  :hook ((python-mode python-ts-mode) . eglot-ensure)\n  :config\n  (add-to-list \'eglot-server-programs\n    `((python-ts-mode python-mode) . ("pyrefly" "lsp"))))\n'})}),"\n",(0,o.jsx)(n.h3,{id:"helix",children:"Helix"}),"\n",(0,o.jsxs)(n.p,{children:["Ensure that pyrefly is on ",(0,o.jsx)(n.code,{children:"$PATH"})," (If you got Pyrefly using ",(0,o.jsx)(n.code,{children:"pip install pyrefly"}),", it should already be on your path).\nAdd this snippet to your ",(0,o.jsx)(n.code,{children:"languages.toml"})," file"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[language-server.pyrefly]\ncommand = "pyrefly"\nargs = ["lsp"]\n\n[[language]]\nname = "python"\nlanguage-servers = ["pyrefly"]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"sublime",children:"Sublime"}),"\n",(0,o.jsxs)(n.p,{children:["See the documentation ",(0,o.jsx)(n.a,{href:"https://lsp.sublimetext.io/language_servers/#pyrefly",children:"here"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);