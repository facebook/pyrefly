"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[1895],{91895:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"why-typed-python","metadata":{"permalink":"/blog/why-typed-python","source":"@site/blog/2025-08-19-why-typed-python.md","title":"Why Today\u2019s Python Developers Are Embracing Type Hints","description":"What is Typed Python? Why is it important for Python developers today? How to can you get started?","date":"2025-08-19T00:00:00.000Z","tags":[{"inline":true,"label":"typechecking","permalink":"/blog/tags/typechecking"},{"inline":true,"label":"python-typing-basics","permalink":"/blog/tags/python-typing-basics"}],"readingTime":10.195,"hasTruncateMarker":true,"authors":[{"name":"Abby Mitchell","url":"https://github.com/javabster","key":"abbym","page":null},{"name":"Pyrefly Team","url":"https://github.com/facebook/pyrefly","key":"pyreflyteam","page":null}],"frontMatter":{"title":"Why Today\u2019s Python Developers Are Embracing Type Hints","description":"What is Typed Python? Why is it important for Python developers today? How to can you get started?","slug":"why-typed-python","authors":["abbym","pyreflyteam"],"tags":["typechecking","python-typing-basics"],"image":"http://pyrefly.org/assets/images/why-typing-blog-6798a36e31db2a87069bd3636c0c97c2.png","hide_table_of_contents":false},"unlisted":false,"nextItem":{"title":"Introducing Pyrefly - A new type checker and IDE experience for Python","permalink":"/blog/introducing-pyrefly"}},"content":"![](./blog_imgs/why-typing-blog.png)\\n\\nPython is one of the most successful programming languages out there, with it recently overtaking Javascript as the most popular language on GitHub, according to the latest [GitHub Octoverse report](https://github.blog/news-insights/octoverse/octoverse-2024/). The report emphasises the popularity of the language in the growing fields of AI, data science and scientific computing \\\\- fields where speedy experimentation and iteration are critical, and where developers are coming from a broad range of STEM backgrounds, not necessarily computer science. But as the Python community expands and projects grow from experiments to production systems, that same flexibility can become a liability.\\n\\nThat\u2019s why today we\u2019re going to talk about typed Python \\\\- what it is, why it\u2019s become important for Python developers today, and how to get started using it to write higher quality, more reliable code.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What is Typed Python?\\n\\nBefore we dive into why you should be using typed Python in your daily development lives, first we need to understand some core concepts and how we got here.\\n\\n### Dynamic vs static typing\\n\\nThe classic Python programming language that you know and love is _dynamically typed_. What does that mean exactly? It means that types are determined at runtime, not when you write your code. Variables can hold any type of value, and you don\'t need to declare what type they are.\\n\\nHere\u2019s an example of dynamic typing in action:\\n\\n```py\\nx = 5        # x is an integer\\nx = \\"hello\\"  # now x is a string\\nx = [1,2,3]  # now x is a list\\n```\\n\\nThis behaviour is one of the things that sets Python apart from languages that are _statically typed_, like Java or C++, which require you to declare types from the get go:\\n\\n```c\\nint x = 5;\\nstd::string x_str = \\"hello\\";\\nstd::vector<int> x_vec = {1, 2, 3};\\n```\\n\\nIn the above example we can\u2019t just reassign the variable `x` to a value of whatever type we want, it can only hold an integer because of the static typing nature of the C++ language.\\n\\nThe fact that Python is a dynamically typed language is one of the reasons it is so easy to use and popular amongst new and experienced programmers alike. It makes it easy to develop quick demos, experimental research and proof of concepts, without needing to spend precious development time declaring types. This flexibility has been instrumental in Python\'s adoption in AI, data science, and scientific computing, where researchers need to rapidly iterate and experiment with different approaches.\\n\\nHowever\u2026 (surely you knew there was a \u201cbut\u201d coming?)\\n\\nWe are quickly moving past the \u201cproof-of-concept\u201d phase for many of these industries. AI and machine learning efforts are actively being integrated into production applications, and with that comes production-level expectations of reliability and stability. Relying on dynamic typing opens these codebases up to a certain level of risk that may not be acceptable at the scale they are now expected to operate.\\n\\n### Enter PEP 484: Static Typing Comes to Python\\n\\nCast your mind back to September 2014: Germany has just won the world cup, skinny jeans are still in fashion and Taylor Swift\u2019s \u201cShake it Off\u201d is number 1 on the charts. That same month [PEP 484](https://peps.python.org/pep-0484/) was first created, proposing the addition of type hints to Python, and fundamentally changing how future developers would be able to write and maintain Python code.\\n\\nWith PEP 484\u2019s acceptance and introduction in Python 3.5, developers could now use static type annotations to declare the expected data types of function arguments and return values, and [subsequent PEPs have continually added more features](https://pyrefly.org/en/docs/python-features-and-peps/) to expand and refine Python\'s type system. Today you can write statically typed Python statements like this:\\n\\n```py\\ndef my_func(x: int, y: str) -> bool:\\n    z: str = str(x)\\n    return z == y\\n```\\n\\nThe key innovation of PEP 484 was introducing a _gradual_ type system that allows developers to slowly add type annotations over time without breaking existing code. The system works by:\\n\\n- Only type-checking functions that have explicit return or parameter annotations\\n- Introducing the `Any` type as an escape hatch that has all possible attributes\\n- Assuming untyped functions implicitly return `Any`\\n\\nThis approach has meant developers can incrementally adopt typing, while still allowing them to take advantage of the default dynamic typing approach that makes Python so easy to work with and ideal for quick prototyping.\\n\\n## Benefits of Python Type Hints: Write Better Code, Faster\\n\\nSo why specifically should you start using type hints in your Python code? Python type hints offer a range of advantages that can significantly improve the quality, maintainability, and scalability of your codebase, at the same time making it easier for other developers to understand your code and collaborate with you.\\n\\n### Types help you catch bugs early\\n\\nType hints assist static analysis tools in identifying mismatches and potential errors before the code is executed, allowing for early bug detection. Take the following example:\\n\\n```py\\ndef add_numbers(a, b):\\n       return a + b\\n...\\nadd_numbers(3, \\"4\\")  # Potential error\\n```\\n\\nThe above error might be easy to spot when you\u2019re calling the function so close to where you\u2019re defining it, but imagine you\u2019re working across multiple files and/or with many lines of code separating them \\\\- suddenly it\u2019s not so easy\\\\!\\n\\nIn comparison, if you\u2019re using type hints in conjunction with a typechecking tool (such as Pyrefly or MyPy), you can catch this error much earlier \\\\- when you\u2019re actually writing the code, rather than when it fails at runtime:\\n\\n```py\\ndef add_numbers(a: int, b: int) -> int:\\n  return a + b\\n...\\nadd_numbers(3, \\"4\\")  # a typechecker will catch this error at time of writing\\n```\\n\\nUsing a typechecker to highlight these types of errors also ensures you can catch an error like this even if you\u2019ve missed this code path in your unit tests.\\n\\n### Typed code is self-documenting\\n\\nAnother benefit of writing typed Python is that using function signatures and variable annotations provide clarity of intent for a given piece of code. In other words, it makes code easier to read and review. It makes refactoring safer and more predictable. It even helps new team members get up to speed quickly on what\u2019s going on in your codebase without wasting their own time, or yours\\\\!\\n\\nTake the following example, without type hints you have to carefully read the internal function code to understand what type of parameters will work and what will be returned:\\n\\n```py\\ndef calculate_stats(data, weights):\\n    total = 0\\n    weighted_sum = 0\\n    for i, value in enumerate(data):\\n        if i < len(weights):\\n            weighted_sum += value * weights[i]\\n            total += weights[i]\\n    avg = weighted_sum / total if total > 0 else 0\\n    return avg, len(data)\\n```\\n\\nWith this version, you can tell instantly what type of arguments you should be passing and what you should expect to get back \\\\- saving precious dev time and just generally making your life easier:\\n\\n```py\\ndef calculate_stats(data: list[float], weights: list[float]) -> tuple[float, int]:\\n    total = 0\\n    weighted_sum = 0\\n    for i, value in enumerate(data):\\n        if i < len(weights):\\n            weighted_sum += value * weights[i]\\n            total += weights[i]\\n    avg = weighted_sum / total if total > 0 else 0\\n    return avg, len(data)\\n```\\n\\nI know I know \\\\- ideally all developers should be adding clear docstrings with every function they write, but we know in reality it doesn\u2019t always shape up that way\\\\! Adding type hints is quicker than writing a typical docstring, won\u2019t go stale (if enforced using a typechecker) and is better than no documentation at all. Modern Python typecheckers also have [IDE extensions](https://pyrefly.org/en/docs/IDE/) that include autocomplete functionality to make life easier.\\n\\n### Typed Python helps you scale from proof-of-concept to production-ready\\n\\nOne of the most important benefits of using type annotations in your code is that it helps you scale your code faster and with less risk. For developers today, the pipeline from experimental code to production systems moves faster than ever, especially in AI and machine learning workflows where research prototypes must quickly evolve into robust, scalable applications.\\n\\nFor example, say there is a team of data scientists that has just published their findings and now needs to operationalize their models. If their published code already includes type hints it makes it much easier, quicker and safer for an engineering team to step in and integrate that research into production applications. In situations like these, type annotations act as a contract between different stages of development, making it clear how data flows through complex, multi-step processing pipelines. This is particularly valuable in AI workflows where a single type mismatch, like passing a NumPy array where a PyTorch tensor is expected, can cause silent failures or performance degradation that only surfaces under production load.\\n\\n## Get Started with Typed Python today\\\\!\\n\\nSo now you know what typed python is and why you should be doing it, how can you actually get started adding types to your code?\\n\\n### Step 0 \\\\- start early\\\\!\\n\\nAs a general rule of thumb, the earlier in a project you start adding type annotations the better.\\nType hints are much easier to add as you go than to retrofit across an entire codebase later.\\n\\nAs we\u2019ve mentioned before, one of the great benefits of Python is that its dynamic typing default makes it very flexible and easy to get started with. So when you\u2019re doing your initial experimentation and prototyping maybe you\u2019re not thinking about making sure it\u2019s type safe \\\\- and that\u2019s ok\\\\! But as soon as you start to think your project might be going somewhere, if more than one person might be working on it, using it or just reading it, you should start adding type hints.\\n\\n### Step 1 \\\\- install a type checker\\n\\nChoose and install a type checker that fits your needs. Typecheckers leverage the code annotations you write to provide important errors and warnings to ensure your codebase is type safe.\\n\\nAt Meta, we recommend [Pyrefly](https://pyrefly.org/), our new open-source type checker built in Rust. Pyrefly is designed to scale from small projects to massive codebases incredibly fast, while providing excellent developer experience. Read the [Pyrefly documentation](https://pyrefly.org/en/docs/) to understand configuration options and best practices, then start adding simple type hints to new functions before gradually working your way up to more complex scenarios.\\n\\nYou should also consider working with a typechecker that [supports IDE integration](https://pyrefly.org/en/docs/IDE/) to get real-time feedback as you write code. Pyrefly provides extensions for editors like VS Code, PyCharm, and Vim which will highlight errors and provide autocomplete suggestions based on your type annotations.\\n\\nAdding your typechecker to your CI processes is also valuable for maintaining code quality at scale. You can [configure your CI/CD pipeline to run type checking](https://pyrefly.org/en/docs/installation/#add-pyrefly-to-ci) on every pull request, treating type errors as build failures.\\n\\n### Step 2 \\\\- make use of resources to get better at typing\\n\\nTyping is one of those skills that gets better the more you practice it in your code, but there are also great resources out there for getting to grips with the functionality and diving deeper into the concepts:\\n\\n- Official [Python typing](https://docs.python.org/3/library/typing.html) documentation \\\\- The typing module docs provide comprehensive coverage of all available types\\n- [PEP 484 and related PEPs](https://pyrefly.org/en/docs/python-features-and-peps/) \\\\- Understanding the foundational specifications helps you grasp the \\"why\\" behind typing decisions\\n- Documentation for your chosen typechecker, e.g. [Pyrefly Docs on learning typing](https://pyrefly.org/en/docs/typing-for-python-developers/)\\n- Join community forums and get support, e.g. [Pyrefly Discord](https://discord.gg/Cf7mFQtW7W), [Typing Discourse](https://discuss.python.org/c/typing)\\n\\n## Conclusion\\n\\nSo there you have it \\\\- a quick trip around the world of Python typing\\\\! By now you\u2019ve hopefully learnt that type hints aren\'t just another Python feature to add to the long list of things you\u2019ll _definitely_ get round to implementing eventually \\\\- they\'re a practical investment in your code\'s future. The upfront effort of adding type hints pays dividends in reduced debugging sessions, smoother code reviews, and fewer production issues. Most importantly, they give you the confidence to refactor and scale your codebase without fear of breaking things in unexpected ways. Start small by adding type annotations to your next function, add a type checker to your workflow, and before you know it writing typed Python will be second nature. Your future self (and your users and teammates\\\\!) will thank you."},{"id":"introducing-pyrefly","metadata":{"permalink":"/blog/introducing-pyrefly","source":"@site/blog/2025-05-15-pyrefly-intro.md","title":"Introducing Pyrefly - A new type checker and IDE experience for Python","description":"Today we are announcing an alpha version of Pyrefly, an open source Python typechecker and IDE extension crafted in Rust","date":"2025-05-15T00:00:00.000Z","tags":[{"inline":true,"label":"typechecking","permalink":"/blog/tags/typechecking"},{"inline":true,"label":"news","permalink":"/blog/tags/news"}],"readingTime":4.69,"hasTruncateMarker":true,"authors":[{"name":"Pyrefly Team","url":"https://github.com/facebook/pyrefly","key":"pyreflyteam","page":null}],"frontMatter":{"title":"Introducing Pyrefly - A new type checker and IDE experience for Python","description":"Today we are announcing an alpha version of Pyrefly, an open source Python typechecker and IDE extension crafted in Rust","slug":"introducing-pyrefly","authors":["pyreflyteam"],"tags":["typechecking","news"],"image":"https://engineering.fb.com/wp-content/uploads/2025/05/Pyrefly-Feature-Image.jpg","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Why Today\u2019s Python Developers Are Embracing Type Hints","permalink":"/blog/why-typed-python"}},"content":"<head>\\n    <link rel=\\"canonical\\" href=\\"https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python/\\" />\\n</head>\\n\\n![Pyrefly Intro](./blog_imgs/pyrefly_intro.webp)\\n\\nToday we are announcing an alpha version of Pyrefly, an open source Python typechecker and IDE extension crafted in Rust. Pyrefly is a static type checker that analyzes Python code to ensure type consistency and help you catch errors throughout your codebase before your code runs. It also supports IDE integration and CLI usage to give you flexibility in how you incorporate it into your workflow.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe open source community is the backbone of the Python language. We are eager to collaborate on Pyrefly with the community and improve Python\u2019s type system and the many libraries that we all rely on.\\n\\n## Get started\\n\\nReady to dive in? The [official Pyrefly website](https://pyrefly.org/) has all the details, but to quickly get started:\\n\\n- [Install](https://pyrefly.org/en/docs/installation/) Pyrefly on the command-line: pip install pyrefly.\\n- [Migrate your existing type checker configuration to Pyrefly](https://pyrefly.org/en/docs/migrating-to-pyrefly/).\\n- Enhance Your IDE: Download the [Pyrefly extension for VSCode](https://marketplace.visualstudio.com/items?itemName=meta.pyrefly) and enjoy a lightning fast IDE experience from starter projects to monorepos.\\n- Leave feedback for us on [GitHub](https://github.com/facebook/pyrefly/issues).\\n\\n## Why we built Pyrefly\\n\\nBack in 2017, we embarked on a mission to create a type checker that could handle [Instagram\u2019s massive codebas](https://instagram-engineering.com/web-service-efficiency-at-instagram-with-python-4976d078e366) of typed Python. This mission led to the birth of the [Pyre](https://github.com/facebook/pyre-check) type checker, inspired by the robust designs of [Hack](https://hacklang.org/) and [Flow](https://flow.org/), and written in OCaml to deliver scalable performance.\\n\\nOver the years, Pyre served us well, but as the type system evolved and the need for typechecking to drive responsive IDE emerged, it was clear that we needed to take a new approach. We explored alternate solutions and leveraged community tools like [Pyright](https://github.com/Microsoft/pyright) for code navigation. But the need for an extensible type checker that can bring code navigation, checking at scale, and exporting types to other services drove us to start over, creating Pyrefly.\\n\\n## The principles behind Pyrefly\\n\\nToday, we\u2019re excited to unveil Pyrefly, a project [we\u2019ve been developing openly on GitHub](https://github.com/facebook/pyrefly). We invite you to explore our work and try it out on your own project. While a project like Pyrefly is the sum of thousands of technical choices, a few notable principles we\u2019ve followed are:\\n\\n### Performance\\n\\nWe want to shift checks that used to happen later on CI to happening on every single keystroke. That requires checking code at speed (on large codebases we can check 1.8 million lines of code per second!) and careful thought to incrementality and updates. Pyrefly is implemented in Rust and designed for high performance on codebases of all sizes.\\n\\n### IDE first\\n\\nWe want the IDE and command line to share a consistent view of the world, which means crafting abstractions that capture the differences without incurring unnecessary costs. Designing these abstractions from the beginning is much easier than retrofitting them, which we tried with Pyre.\\n\\n### Inference\\n\\nSome [Python programs are typed](https://engineering.fb.com/2024/12/09/developer-tools/typed-python-2024-survey-meta/), but many aren\u2019t. We want users to benefit from types even if they haven\u2019t annotated their code \u2013 so automatically infer types for returns and local variables and display them in the IDE. What\u2019s more, in the IDE you can even double click to insert these inferred types if you think that would make the program better.\\n\\n### Open source\\n\\nPython is open source, and hugely popular. The [Python typing specification](https://typing.python.org/en/latest/spec/) is open source, which made Pyrefly vastly easier to develop. Many of the libraries Meta contributes to are open source,( e.g., [PyTorch](https://pytorch.org/)).\\n\\nPyrefly is also open source, [available on GitHub](https://github.com/facebook/pyrefly/) under the [MIT license](https://github.com/facebook/pyrefly/blob/main/LICENSE), and we encourage [pull requests](https://github.com/facebook/pyrefly/pulls) and [issue reports](https://github.com/facebook/pyrefly/issues). We also have a [Discord channel](https://discord.gg/Cf7mFQtW7W) for more free flowing discussions. We would love to build a community around Pyrefly.\\n\\n## The future of Pyrefly\\n\\nWe will work with the Python community to drive the language forward and improve the developer experience. Since the beginning of Pyre, we open sourced our code and contributed a number of PEPs alongside the community of type checker maintainers. We feel we can do more with Pyrefly to help Python developers leverage the benefits of types for developers, library authors, and folks just learning the language.\\n\\nMeta has leveraged types in dynamic languages from the beginning and knows the significant benefits it brings to developer productivity and security. We plan to share more of our learnings and tooling with [blogs](https://engineering.fb.com/2024/12/09/developer-tools/typed-python-2024-survey-meta/), better types in the ecosystem and language enhancements.\\n\\nToday we\u2019re releasing Pyrefly as an alpha. At the same time, we\u2019re busy burning down the long-tail of bugs and features aiming to remove the alpha label this Summer. Your feedback is invaluable to get there, so please give it a try and [report your bugs](https://github.com/facebook/pyrefly/issues) or things you think can be improved. Even if Pyrefly isn\u2019t right for your project, we would love to hear how you use types and what you would like to see improved in your editor.\\n\\nJoin us on the journey as we help illuminate your bugs with Pyrefly. Happy coding! \ud83d\udc0d\u2728\\n\\n## Hear more about Pyrefly\\n\\nCheck out the [episode of the Meta Tech Podcast](https://engineering.fb.com/2025/05/15/developer-tools/open-sourcing-pyrefly-a-faster-python-type-checker-written-in-rust) where several team members share their experience developing Pyrefly and technical details for how it works. We also just [talked at PyCon US](https://us.pycon.org/2025/schedule/presentation/118/) about high-performance Python through faster type checking and free threaded execution.\\n\\nTo learn more about Meta Open Source, visit our[open source site](https://opensource.fb.com/), subscribe to our [YouTube channel](https://www.youtube.com/channel/UCCQY962PmHabTjaHv2wJzfQ), or follow us on [Facebook](https://www.facebook.com/MetaOpenSource), [Threads](https://www.threads.net/@metaopensource), [X](https://x.com/MetaOpenSource), and [LinkedIn](https://www.linkedin.com/showcase/meta-open-source?fbclid=IwZXh0bgNhZW0CMTEAAR2fEOJNb7zOi8rJeRvQry5sRxARpdL3OpS4sYLdC1_npkEy60gBS1ynXwQ_aem_mJUK6jEUApFTW75Emhtpqw).\\n\\n### Acknowledgements\\n\\n_Pyrefly was created By Meta\u2019s Python Language Tooling Team: Jia Chen, Rebecca Chen, Sam Goldman, David Luo, Kyle Into, Zeina Migeed, Neil Mitchell, Maggie Moss, Conner Nilsen, Aaron Pollack, Teddy Sudol, Steven Troxler, Lucian Wischik, Danny Yang, and Sam Zhou._"}]}}')}}]);