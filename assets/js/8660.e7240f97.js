"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[8660],{8660:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"migrating-from-pyright","title":"Migrating from Pyright","description":"How to switch your type checker configuration from Pyright to Pyrefly","source":"@site/docs/migrating-from-pyright.mdx","sourceDirName":".","slug":"/migrating-from-pyright","permalink":"/en/docs/migrating-from-pyright","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/migrating-from-pyright.mdx","tags":[],"version":"current","frontMatter":{"title":"Migrating from Pyright","description":"How to switch your type checker configuration from Pyright to Pyrefly"},"sidebar":"docsSidebar","previous":{"title":"Migrating from Mypy","permalink":"/en/docs/migrating-from-mypy"},"next":{"title":"IDE Installation","permalink":"/en/docs/IDE"}}');var s=r(74848),t=r(28453);const o={title:"Migrating from Pyright",description:"How to switch your type checker configuration from Pyright to Pyrefly"},c=void 0,a={},l=[{value:"Running Pyrefly",id:"running-pyrefly",level:2},{value:"Pyright Config Migration",id:"pyright-config-migration",level:2},{value:"Config Migration Details",id:"config-migration-details",level:2},{value:"Type Check Diagnostic Settings and Error Kinds",id:"type-check-diagnostic-settings-and-error-kinds",level:3},{value:"Execution Environments",id:"execution-environments",level:3},{value:"Extending Builtins",id:"extending-builtins",level:3},{value:"Silencing Errors",id:"silencing-errors",level:2},{value:"Error Kind Mapping",id:"error-kind-mapping",level:2}];function h(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"running-pyrefly",children:"Running Pyrefly"}),"\n",(0,s.jsx)(i.p,{children:"Like pyright, pyrefly can be given a list of files to check:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sh",children:"$ pyrefly check file1.py file2.py\n"})}),"\n",(0,s.jsx)(i.p,{children:"The easiest way to run pyrefly on all files in a project is to run it from the project root:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sh",children:"$ cd your/project\n$ pyrefly check\n"})}),"\n",(0,s.jsx)(i.p,{children:"Pyrefly doesn't need a config file to start checking your code. Its sensible defaults are designed to work well for most projects.\nHowever, projects with existing pyright configs may want to configure pyrefly to suit their own needs."}),"\n",(0,s.jsx)(i.h2,{id:"pyright-config-migration",children:"Pyright Config Migration"}),"\n",(0,s.jsx)(i.p,{children:"To make it as easy as possible to get started with pyrefly, we've provided a script for automatically migrating a pyright config to pyrefly."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sh",children:"$ pyrefly init path/to/your/project\n"})}),"\n",(0,s.jsxs)(i.p,{children:["This will search for an existing ",(0,s.jsx)(i.code,{children:"pyrightconfig.json"})," or ",(0,s.jsx)(i.code,{children:"pyproject.toml"})," with a ",(0,s.jsx)(i.code,{children:"tool.pyright"})," section, and then transform it into a ",(0,s.jsx)(i.code,{children:"pyrefly.toml"})," (or ",(0,s.jsx)(i.code,{children:"[tool.pyrefly]"})," section) while preserving as many options as possible. See ",(0,s.jsx)(i.code,{children:"init --help"})," for more options."]}),"\n",(0,s.jsx)(i.p,{children:"There is a significant overlap between pyright's and pyrefly's configuration options, so migration is pretty straightforward. However, it may be worth checking the generated config for errors, just in case."}),"\n",(0,s.jsxs)(i.p,{children:["If you'd rather start fresh with a hand-written config, please see the ",(0,s.jsx)(i.a,{href:"/en/docs/configuration",children:"pyrefly configuration docs"}),".\nIf you run into any issues with config migration, please ",(0,s.jsx)(i.a,{href:"https://github.com/facebook/pyrefly/issues",children:"let us know"}),"!"]}),"\n",(0,s.jsx)(i.h2,{id:"config-migration-details",children:"Config Migration Details"}),"\n",(0,s.jsx)(i.p,{children:"When it comes to listing files, pyright uses just paths, while pyrefly supports glob patterns. Thankfully, paths are a subset of glob patterns, so pyrefly can just use the paths as-is. You could consider manually simplifying the paths into glob patterns, but it's not necessary."}),"\n",(0,s.jsxs)(i.p,{children:["Pyright supports four platforms: Windows, Linux, Darwin (macOS), and All. Since pyrefly only supports Python's ",(0,s.jsx)(i.a,{href:"https://docs.python.org/3/library/sys.html#sys.platform",children:"supported platforms"}),', we choose to treat "All" as "linux".']}),"\n",(0,s.jsx)(i.h3,{id:"type-check-diagnostic-settings-and-error-kinds",children:"Type Check Diagnostic Settings and Error Kinds"}),"\n",(0,s.jsxs)(i.p,{children:["Pyrefly maps pyright's ",(0,s.jsx)(i.a,{href:"https://microsoft.github.io/pyright/#/configuration?id=type-check-diagnostics-settings",children:"type check diagnostics settings"})," to equivalent pyrefly ",(0,s.jsx)(i.a,{href:"/en/docs/error-kinds",children:"error kinds"}),".\nWhile not every diagnostic setting has an equivalent error kind, we make an effort to ensure that pyrefly suppresses the same errors that pyright does."]}),"\n",(0,s.jsxs)(i.p,{children:["This may lead to overly broad error suppressions, and you may want to consider removing some error kinds from the disable list.\nYou can also use a ",(0,s.jsx)(i.a,{href:"/en/docs/configuration#sub_config",children:"SubConfig"})," to selectively silence errors in specific files,\nor see ",(0,s.jsx)(i.a,{href:"#silencing-errors",children:"Silencing Errors"})," for how to suppress errors at the source."]}),"\n",(0,s.jsxs)(i.p,{children:["See ",(0,s.jsx)(i.a,{href:"#error-kind-mapping",children:"Error Kind Mapping"})," for a table showing the relationship between type check diagnostic settings and error kinds."]}),"\n",(0,s.jsx)(i.h3,{id:"execution-environments",children:"Execution Environments"}),"\n",(0,s.jsxs)(i.p,{children:["Pyright's ",(0,s.jsx)(i.a,{href:"https://microsoft.github.io/pyright/#/configuration?id=execution-environment-options",children:"execution environments"})," let you customize the Python version, platform, module search paths, and diagnostic settings for some part of your project.\nPyrefly's ",(0,s.jsx)(i.a,{href:"/en/docs/configuration#sub_config",children:"SubConfigs"})," are a similar mechanism that let you configure pyrefly's behavior for files matching a filepath glob.\nHowever, subconfigs do not support changing the Python version, platform, or module search paths."]}),"\n",(0,s.jsxs)(i.p,{children:["Diagnostic settings are carried over to the equivalent subconfig, using the mapping mentioned ",(0,s.jsx)(i.a,{href:"#type-check-diagnostic-settings-and-error-kinds",children:"above"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"extending-builtins",children:"Extending Builtins"}),"\n",(0,s.jsxs)(i.p,{children:["Pyright automatically imports any builtins defined in ",(0,s.jsx)(i.code,{children:"__builtins__.pyi"})," at the project root or in a custom stubs directory specified by ",(0,s.jsx)(i.code,{children:"stubPath"})," (defaulting to ",(0,s.jsx)(i.code,{children:"./typings"}),")."]}),"\n",(0,s.jsxs)(i.p,{children:["Pyrefly supports this behavior - the directory for ",(0,s.jsx)(i.code,{children:"stubPath"})," should be added to your Pyrefly config's ",(0,s.jsx)(i.code,{children:"site-package-path"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"silencing-errors",children:"Silencing Errors"}),"\n",(0,s.jsxs)(i.p,{children:["Like pyright, pyrefly has ways to silence specific error codes. Full details can be found in the ",(0,s.jsx)(i.a,{href:"/en/docs/error-suppressions",children:"Error Suppression docs"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"To silence an error on a specific line, add a disable comment above that line. You can either suppress all errors on that line:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"# pyrefly: ignore\nx: str = 1\n"})}),"\n",(0,s.jsx)(i.p,{children:"Or target a specific error type:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"# pyrefly: ignore[bad-assignment]\nx: str = 1\n"})}),"\n",(0,s.jsx)(i.p,{children:"To suppress all instances of an error, disable that error in the config:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"[errors]\nmissing-import = false\n"})}),"\n",(0,s.jsxs)(i.p,{children:["This is similar to pyright's ",(0,s.jsx)(i.a,{href:"https://microsoft.github.io/pyright/#/configuration?id=type-check-rule-overrides",children:"type check rule overrides"}),", though of course the ",(0,s.jsx)(i.a,{href:"/en/docs/error-kinds",children:"error codes"})," are different!"]}),"\n",(0,s.jsx)(i.p,{children:"You can also use:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-toml",children:"permissive-ignores = true\n"})}),"\n",(0,s.jsxs)(i.p,{children:["To allow ",(0,s.jsx)(i.code,{children:"pyright: ignore"})," comments to be used by Pyrefly."]}),"\n",(0,s.jsx)(i.h2,{id:"error-kind-mapping",children:"Error Kind Mapping"}),"\n",(0,s.jsxs)(i.p,{children:["This table shows the mapping between pyright's ",(0,s.jsx)(i.a,{href:"https://microsoft.github.io/pyright/#/configuration?id=type-check-diagnostics-settings",children:"type check diagnostics settings"}),"\nand pyrefly's ",(0,s.jsx)(i.a,{href:"/en/docs/error-kinds",children:"error kinds"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"This table will be expanded as more diagnostics are supported."}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Pyright"}),(0,s.jsx)(i.th,{children:"Pyrefly"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"reportMissingImports"}),(0,s.jsx)(i.td,{children:"missing-import"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"reportMissingModuleSource"}),(0,s.jsx)(i.td,{children:"missing-import"})]})]})]})]})}function d(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);